'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.832
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("Root"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Root
    Inherits System.Data.DataSet
    
    Private tableMenuData As MenuDataDataTable
    
    Private tableButtonData As ButtonDataDataTable
    
    Private relationMenuData_ButtonData As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MenuData")) Is Nothing) Then
                MyBase.Tables.Add(New MenuDataDataTable(ds.Tables("MenuData")))
            End If
            If (Not (ds.Tables("ButtonData")) Is Nothing) Then
                MyBase.Tables.Add(New ButtonDataDataTable(ds.Tables("ButtonData")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MenuData() As MenuDataDataTable
        Get
            Return Me.tableMenuData
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ButtonData() As ButtonDataDataTable
        Get
            Return Me.tableButtonData
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As Root = CType(MyBase.Clone,Root)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("MenuData")) Is Nothing) Then
                MyBase.Tables.Add(New MenuDataDataTable(ds.Tables("MenuData")))
            End If
            If (Not (ds.Tables("ButtonData")) Is Nothing) Then
                MyBase.Tables.Add(New ButtonDataDataTable(ds.Tables("ButtonData")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableMenuData = CType(MyBase.Tables("MenuData"),MenuDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMenuData) Is Nothing) Then
                Me.tableMenuData.InitVars
            End If
        End If
        Me.tableButtonData = CType(MyBase.Tables("ButtonData"),ButtonDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableButtonData) Is Nothing) Then
                Me.tableButtonData.InitVars
            End If
        End If
        Me.relationMenuData_ButtonData = Me.Relations("MenuData_ButtonData")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Root"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MenuData.xsd"
        Me.EnforceConstraints = false
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableMenuData = New MenuDataDataTable
        MyBase.Tables.Add(Me.tableMenuData)
        Me.tableButtonData = New ButtonDataDataTable
        MyBase.Tables.Add(Me.tableButtonData)
        Dim fkc As System.Data.ForeignKeyConstraint
        fkc = New System.Data.ForeignKeyConstraint("MenuData_ButtonData", New System.Data.DataColumn() {Me.tableMenuData.MenuData_IdColumn}, New System.Data.DataColumn() {Me.tableButtonData.MenuData_IdColumn})
        Me.tableButtonData.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationMenuData_ButtonData = New System.Data.DataRelation("MenuData_ButtonData", New System.Data.DataColumn() {Me.tableMenuData.MenuData_IdColumn}, New System.Data.DataColumn() {Me.tableButtonData.MenuData_IdColumn}, false)
        Me.relationMenuData_ButtonData.Nested = true
        Me.Relations.Add(Me.relationMenuData_ButtonData)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMenuData() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeButtonData() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Root = New Root
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub MenuDataRowChangeEventHandler(ByVal sender As Object, ByVal e As MenuDataRowChangeEvent)
    
    Public Delegate Sub ButtonDataRowChangeEventHandler(ByVal sender As Object, ByVal e As ButtonDataRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MenuDataDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnColumns As System.Data.DataColumn
        
        Private columnButtonHeight As System.Data.DataColumn
        
        Private columnButtonWidth As System.Data.DataColumn
        
        Private columnMinWidth As System.Data.DataColumn
        
        Private columnTopMargin As System.Data.DataColumn
        
        Private columnBottomMargin As System.Data.DataColumn
        
        Private columnSideMargin As System.Data.DataColumn
        
        Private columnHorizontalSpacing As System.Data.DataColumn
        
        Private columnVerticalSpacing As System.Data.DataColumn
        
        Private columnTitleTag As System.Data.DataColumn
        
        Private columnCaptionTag As System.Data.DataColumn
        
        Private columnCancelCaptionTag As System.Data.DataColumn
        
        Private columnCancelToolTipTag As System.Data.DataColumn
        
        Private columnMainMenuButtonName As System.Data.DataColumn
        
        Private columnMenuData_Id As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MenuData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnsColumn() As System.Data.DataColumn
            Get
                Return Me.columnColumns
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ButtonHeightColumn() As System.Data.DataColumn
            Get
                Return Me.columnButtonHeight
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ButtonWidthColumn() As System.Data.DataColumn
            Get
                Return Me.columnButtonWidth
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinWidthColumn() As System.Data.DataColumn
            Get
                Return Me.columnMinWidth
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TopMarginColumn() As System.Data.DataColumn
            Get
                Return Me.columnTopMargin
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BottomMarginColumn() As System.Data.DataColumn
            Get
                Return Me.columnBottomMargin
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SideMarginColumn() As System.Data.DataColumn
            Get
                Return Me.columnSideMargin
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HorizontalSpacingColumn() As System.Data.DataColumn
            Get
                Return Me.columnHorizontalSpacing
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VerticalSpacingColumn() As System.Data.DataColumn
            Get
                Return Me.columnVerticalSpacing
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleTagColumn() As System.Data.DataColumn
            Get
                Return Me.columnTitleTag
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CaptionTagColumn() As System.Data.DataColumn
            Get
                Return Me.columnCaptionTag
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CancelCaptionTagColumn() As System.Data.DataColumn
            Get
                Return Me.columnCancelCaptionTag
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CancelToolTipTagColumn() As System.Data.DataColumn
            Get
                Return Me.columnCancelToolTipTag
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MainMenuButtonNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnMainMenuButtonName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MenuData_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnMenuData_Id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MenuDataRow
            Get
                Return CType(Me.Rows(index),MenuDataRow)
            End Get
        End Property
        
        Public Event MenuDataRowChanging As MenuDataRowChangeEventHandler
        
        Public Event MenuDataRowChanged As MenuDataRowChangeEventHandler
        
        Public Event MenuDataRowDeleting As MenuDataRowChangeEventHandler
        
        Public Event MenuDataRowDeleted As MenuDataRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMenuDataRow(ByVal row As MenuDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMenuDataRow(ByVal Columns As String, ByVal ButtonHeight As String, ByVal ButtonWidth As String, ByVal MinWidth As String, ByVal TopMargin As String, ByVal BottomMargin As String, ByVal SideMargin As String, ByVal HorizontalSpacing As String, ByVal VerticalSpacing As String, ByVal TitleTag As String, ByVal CaptionTag As String, ByVal CancelCaptionTag As String, ByVal CancelToolTipTag As String, ByVal MainMenuButtonName As String) As MenuDataRow
            Dim rowMenuDataRow As MenuDataRow = CType(Me.NewRow,MenuDataRow)
            rowMenuDataRow.ItemArray = New Object() {Columns, ButtonHeight, ButtonWidth, MinWidth, TopMargin, BottomMargin, SideMargin, HorizontalSpacing, VerticalSpacing, TitleTag, CaptionTag, CancelCaptionTag, CancelToolTipTag, MainMenuButtonName, Nothing}
            Me.Rows.Add(rowMenuDataRow)
            Return rowMenuDataRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As MenuDataDataTable = CType(MyBase.Clone,MenuDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New MenuDataDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnColumns = MyBase.Columns("Columns")
            Me.columnButtonHeight = MyBase.Columns("ButtonHeight")
            Me.columnButtonWidth = MyBase.Columns("ButtonWidth")
            Me.columnMinWidth = MyBase.Columns("MinWidth")
            Me.columnTopMargin = MyBase.Columns("TopMargin")
            Me.columnBottomMargin = MyBase.Columns("BottomMargin")
            Me.columnSideMargin = MyBase.Columns("SideMargin")
            Me.columnHorizontalSpacing = MyBase.Columns("HorizontalSpacing")
            Me.columnVerticalSpacing = MyBase.Columns("VerticalSpacing")
            Me.columnTitleTag = MyBase.Columns("TitleTag")
            Me.columnCaptionTag = MyBase.Columns("CaptionTag")
            Me.columnCancelCaptionTag = MyBase.Columns("CancelCaptionTag")
            Me.columnCancelToolTipTag = MyBase.Columns("CancelToolTipTag")
            Me.columnMainMenuButtonName = MyBase.Columns("MainMenuButtonName")
            Me.columnMenuData_Id = MyBase.Columns("MenuData_Id")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnColumns = New System.Data.DataColumn("Columns", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumns)
            Me.columnButtonHeight = New System.Data.DataColumn("ButtonHeight", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnButtonHeight)
            Me.columnButtonWidth = New System.Data.DataColumn("ButtonWidth", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnButtonWidth)
            Me.columnMinWidth = New System.Data.DataColumn("MinWidth", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinWidth)
            Me.columnTopMargin = New System.Data.DataColumn("TopMargin", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTopMargin)
            Me.columnBottomMargin = New System.Data.DataColumn("BottomMargin", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBottomMargin)
            Me.columnSideMargin = New System.Data.DataColumn("SideMargin", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSideMargin)
            Me.columnHorizontalSpacing = New System.Data.DataColumn("HorizontalSpacing", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHorizontalSpacing)
            Me.columnVerticalSpacing = New System.Data.DataColumn("VerticalSpacing", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerticalSpacing)
            Me.columnTitleTag = New System.Data.DataColumn("TitleTag", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitleTag)
            Me.columnCaptionTag = New System.Data.DataColumn("CaptionTag", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaptionTag)
            Me.columnCancelCaptionTag = New System.Data.DataColumn("CancelCaptionTag", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCancelCaptionTag)
            Me.columnCancelToolTipTag = New System.Data.DataColumn("CancelToolTipTag", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCancelToolTipTag)
            Me.columnMainMenuButtonName = New System.Data.DataColumn("MainMenuButtonName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMainMenuButtonName)
            Me.columnMenuData_Id = New System.Data.DataColumn("MenuData_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnMenuData_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnMenuData_Id}, true))
            Me.columnMenuData_Id.AutoIncrement = true
            Me.columnMenuData_Id.AllowDBNull = false
            Me.columnMenuData_Id.Unique = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMenuDataRow() As MenuDataRow
            Return CType(Me.NewRow,MenuDataRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New MenuDataRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MenuDataRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MenuDataRowChangedEvent) Is Nothing) Then
                RaiseEvent MenuDataRowChanged(Me, New MenuDataRowChangeEvent(CType(e.Row,MenuDataRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MenuDataRowChangingEvent) Is Nothing) Then
                RaiseEvent MenuDataRowChanging(Me, New MenuDataRowChangeEvent(CType(e.Row,MenuDataRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MenuDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent MenuDataRowDeleted(Me, New MenuDataRowChangeEvent(CType(e.Row,MenuDataRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MenuDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent MenuDataRowDeleting(Me, New MenuDataRowChangeEvent(CType(e.Row,MenuDataRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMenuDataRow(ByVal row As MenuDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Root = New Root
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MenuDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ButtonDataDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCaptionTag As System.Data.DataColumn
        
        Private columnDescriptionTag As System.Data.DataColumn
        
        Private columnToolTipTag As System.Data.DataColumn
        
        Private columnImageTag As System.Data.DataColumn
        
        Private columnVisible As System.Data.DataColumn
        
        Private columnAction As System.Data.DataColumn
        
        Private columnLaunchFile As System.Data.DataColumn
        
        Private columnUseFRWM As System.Data.DataColumn
        
        Private columnLaunchFlags As System.Data.DataColumn
        
        Private columnWindowTitle As System.Data.DataColumn
        
        Private columnCommandLine As System.Data.DataColumn
        
        Private columnMenuData_Id As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ButtonData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CaptionTagColumn() As System.Data.DataColumn
            Get
                Return Me.columnCaptionTag
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionTagColumn() As System.Data.DataColumn
            Get
                Return Me.columnDescriptionTag
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ToolTipTagColumn() As System.Data.DataColumn
            Get
                Return Me.columnToolTipTag
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImageTagColumn() As System.Data.DataColumn
            Get
                Return Me.columnImageTag
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VisibleColumn() As System.Data.DataColumn
            Get
                Return Me.columnVisible
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActionColumn() As System.Data.DataColumn
            Get
                Return Me.columnAction
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LaunchFileColumn() As System.Data.DataColumn
            Get
                Return Me.columnLaunchFile
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UseFRWMColumn() As System.Data.DataColumn
            Get
                Return Me.columnUseFRWM
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LaunchFlagsColumn() As System.Data.DataColumn
            Get
                Return Me.columnLaunchFlags
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WindowTitleColumn() As System.Data.DataColumn
            Get
                Return Me.columnWindowTitle
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommandLineColumn() As System.Data.DataColumn
            Get
                Return Me.columnCommandLine
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MenuData_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnMenuData_Id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ButtonDataRow
            Get
                Return CType(Me.Rows(index),ButtonDataRow)
            End Get
        End Property
        
        Public Event ButtonDataRowChanging As ButtonDataRowChangeEventHandler
        
        Public Event ButtonDataRowChanged As ButtonDataRowChangeEventHandler
        
        Public Event ButtonDataRowDeleting As ButtonDataRowChangeEventHandler
        
        Public Event ButtonDataRowDeleted As ButtonDataRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddButtonDataRow(ByVal row As ButtonDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddButtonDataRow(ByVal CaptionTag As String, ByVal DescriptionTag As String, ByVal ToolTipTag As String, ByVal ImageTag As String, ByVal Visible As String, ByVal Action As String, ByVal LaunchFile As String, ByVal UseFRWM As String, ByVal LaunchFlags As String, ByVal WindowTitle As String, ByVal CommandLine As String, ByVal parentMenuDataRowByMenuData_ButtonData As MenuDataRow) As ButtonDataRow
            Dim rowButtonDataRow As ButtonDataRow = CType(Me.NewRow,ButtonDataRow)
            rowButtonDataRow.ItemArray = New Object() {CaptionTag, DescriptionTag, ToolTipTag, ImageTag, Visible, Action, LaunchFile, UseFRWM, LaunchFlags, WindowTitle, CommandLine, parentMenuDataRowByMenuData_ButtonData(14)}
            Me.Rows.Add(rowButtonDataRow)
            Return rowButtonDataRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ButtonDataDataTable = CType(MyBase.Clone,ButtonDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ButtonDataDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCaptionTag = MyBase.Columns("CaptionTag")
            Me.columnDescriptionTag = MyBase.Columns("DescriptionTag")
            Me.columnToolTipTag = MyBase.Columns("ToolTipTag")
            Me.columnImageTag = MyBase.Columns("ImageTag")
            Me.columnVisible = MyBase.Columns("Visible")
            Me.columnAction = MyBase.Columns("Action")
            Me.columnLaunchFile = MyBase.Columns("LaunchFile")
            Me.columnUseFRWM = MyBase.Columns("UseFRWM")
            Me.columnLaunchFlags = MyBase.Columns("LaunchFlags")
            Me.columnWindowTitle = MyBase.Columns("WindowTitle")
            Me.columnCommandLine = MyBase.Columns("CommandLine")
            Me.columnMenuData_Id = MyBase.Columns("MenuData_Id")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCaptionTag = New System.Data.DataColumn("CaptionTag", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaptionTag)
            Me.columnDescriptionTag = New System.Data.DataColumn("DescriptionTag", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescriptionTag)
            Me.columnToolTipTag = New System.Data.DataColumn("ToolTipTag", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnToolTipTag)
            Me.columnImageTag = New System.Data.DataColumn("ImageTag", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImageTag)
            Me.columnVisible = New System.Data.DataColumn("Visible", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisible)
            Me.columnAction = New System.Data.DataColumn("Action", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAction)
            Me.columnLaunchFile = New System.Data.DataColumn("LaunchFile", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLaunchFile)
            Me.columnUseFRWM = New System.Data.DataColumn("UseFRWM", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUseFRWM)
            Me.columnLaunchFlags = New System.Data.DataColumn("LaunchFlags", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLaunchFlags)
            Me.columnWindowTitle = New System.Data.DataColumn("WindowTitle", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWindowTitle)
            Me.columnCommandLine = New System.Data.DataColumn("CommandLine", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommandLine)
            Me.columnMenuData_Id = New System.Data.DataColumn("MenuData_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnMenuData_Id)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewButtonDataRow() As ButtonDataRow
            Return CType(Me.NewRow,ButtonDataRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ButtonDataRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ButtonDataRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ButtonDataRowChangedEvent) Is Nothing) Then
                RaiseEvent ButtonDataRowChanged(Me, New ButtonDataRowChangeEvent(CType(e.Row,ButtonDataRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ButtonDataRowChangingEvent) Is Nothing) Then
                RaiseEvent ButtonDataRowChanging(Me, New ButtonDataRowChangeEvent(CType(e.Row,ButtonDataRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ButtonDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent ButtonDataRowDeleted(Me, New ButtonDataRowChangeEvent(CType(e.Row,ButtonDataRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ButtonDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent ButtonDataRowDeleting(Me, New ButtonDataRowChangeEvent(CType(e.Row,ButtonDataRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveButtonDataRow(ByVal row As ButtonDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Root = New Root
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ButtonDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MenuDataRow
        Inherits System.Data.DataRow
        
        Private tableMenuData As MenuDataDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMenuData = CType(Me.Table,MenuDataDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Columns() As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuData.ColumnsColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Columns' in table 'MenuData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuData.ColumnsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ButtonHeight() As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuData.ButtonHeightColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ButtonHeight' in table 'MenuData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuData.ButtonHeightColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ButtonWidth() As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuData.ButtonWidthColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ButtonWidth' in table 'MenuData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuData.ButtonWidthColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinWidth() As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuData.MinWidthColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'MinWidth' in table 'MenuData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuData.MinWidthColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TopMargin() As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuData.TopMarginColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TopMargin' in table 'MenuData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuData.TopMarginColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BottomMargin() As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuData.BottomMarginColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'BottomMargin' in table 'MenuData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuData.BottomMarginColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SideMargin() As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuData.SideMarginColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SideMargin' in table 'MenuData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuData.SideMarginColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HorizontalSpacing() As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuData.HorizontalSpacingColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'HorizontalSpacing' in table 'MenuData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuData.HorizontalSpacingColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerticalSpacing() As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuData.VerticalSpacingColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'VerticalSpacing' in table 'MenuData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuData.VerticalSpacingColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TitleTag() As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuData.TitleTagColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TitleTag' in table 'MenuData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuData.TitleTagColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CaptionTag() As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuData.CaptionTagColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CaptionTag' in table 'MenuData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuData.CaptionTagColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CancelCaptionTag() As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuData.CancelCaptionTagColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CancelCaptionTag' in table 'MenuData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuData.CancelCaptionTagColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CancelToolTipTag() As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuData.CancelToolTipTagColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CancelToolTipTag' in table 'MenuData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuData.CancelToolTipTagColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MainMenuButtonName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuData.MainMenuButtonNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'MainMenuButtonName' in table 'MenuData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuData.MainMenuButtonNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MenuData_Id() As Integer
            Get
                Return CType(Me(Me.tableMenuData.MenuData_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableMenuData.MenuData_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnsNull() As Boolean
            Return Me.IsNull(Me.tableMenuData.ColumnsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnsNull()
            Me(Me.tableMenuData.ColumnsColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsButtonHeightNull() As Boolean
            Return Me.IsNull(Me.tableMenuData.ButtonHeightColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetButtonHeightNull()
            Me(Me.tableMenuData.ButtonHeightColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsButtonWidthNull() As Boolean
            Return Me.IsNull(Me.tableMenuData.ButtonWidthColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetButtonWidthNull()
            Me(Me.tableMenuData.ButtonWidthColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMinWidthNull() As Boolean
            Return Me.IsNull(Me.tableMenuData.MinWidthColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMinWidthNull()
            Me(Me.tableMenuData.MinWidthColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTopMarginNull() As Boolean
            Return Me.IsNull(Me.tableMenuData.TopMarginColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTopMarginNull()
            Me(Me.tableMenuData.TopMarginColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBottomMarginNull() As Boolean
            Return Me.IsNull(Me.tableMenuData.BottomMarginColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBottomMarginNull()
            Me(Me.tableMenuData.BottomMarginColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSideMarginNull() As Boolean
            Return Me.IsNull(Me.tableMenuData.SideMarginColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSideMarginNull()
            Me(Me.tableMenuData.SideMarginColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHorizontalSpacingNull() As Boolean
            Return Me.IsNull(Me.tableMenuData.HorizontalSpacingColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHorizontalSpacingNull()
            Me(Me.tableMenuData.HorizontalSpacingColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerticalSpacingNull() As Boolean
            Return Me.IsNull(Me.tableMenuData.VerticalSpacingColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerticalSpacingNull()
            Me(Me.tableMenuData.VerticalSpacingColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTitleTagNull() As Boolean
            Return Me.IsNull(Me.tableMenuData.TitleTagColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTitleTagNull()
            Me(Me.tableMenuData.TitleTagColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCaptionTagNull() As Boolean
            Return Me.IsNull(Me.tableMenuData.CaptionTagColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCaptionTagNull()
            Me(Me.tableMenuData.CaptionTagColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCancelCaptionTagNull() As Boolean
            Return Me.IsNull(Me.tableMenuData.CancelCaptionTagColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCancelCaptionTagNull()
            Me(Me.tableMenuData.CancelCaptionTagColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCancelToolTipTagNull() As Boolean
            Return Me.IsNull(Me.tableMenuData.CancelToolTipTagColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCancelToolTipTagNull()
            Me(Me.tableMenuData.CancelToolTipTagColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMainMenuButtonNameNull() As Boolean
            Return Me.IsNull(Me.tableMenuData.MainMenuButtonNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMainMenuButtonNameNull()
            Me(Me.tableMenuData.MainMenuButtonNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetButtonDataRows() As ButtonDataRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("MenuData_ButtonData")),ButtonDataRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ButtonDataRow
        Inherits System.Data.DataRow
        
        Private tableButtonData As ButtonDataDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableButtonData = CType(Me.Table,ButtonDataDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CaptionTag() As String
            Get
                Try 
                    Return CType(Me(Me.tableButtonData.CaptionTagColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CaptionTag' in table 'ButtonData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableButtonData.CaptionTagColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescriptionTag() As String
            Get
                Try 
                    Return CType(Me(Me.tableButtonData.DescriptionTagColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DescriptionTag' in table 'ButtonData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableButtonData.DescriptionTagColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ToolTipTag() As String
            Get
                Try 
                    Return CType(Me(Me.tableButtonData.ToolTipTagColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ToolTipTag' in table 'ButtonData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableButtonData.ToolTipTagColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImageTag() As String
            Get
                Try 
                    Return CType(Me(Me.tableButtonData.ImageTagColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ImageTag' in table 'ButtonData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableButtonData.ImageTagColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Visible() As String
            Get
                Try 
                    Return CType(Me(Me.tableButtonData.VisibleColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Visible' in table 'ButtonData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableButtonData.VisibleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Action() As String
            Get
                Try 
                    Return CType(Me(Me.tableButtonData.ActionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Action' in table 'ButtonData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableButtonData.ActionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LaunchFile() As String
            Get
                Try 
                    Return CType(Me(Me.tableButtonData.LaunchFileColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LaunchFile' in table 'ButtonData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableButtonData.LaunchFileColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UseFRWM() As String
            Get
                Try 
                    Return CType(Me(Me.tableButtonData.UseFRWMColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'UseFRWM' in table 'ButtonData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableButtonData.UseFRWMColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LaunchFlags() As String
            Get
                Try 
                    Return CType(Me(Me.tableButtonData.LaunchFlagsColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LaunchFlags' in table 'ButtonData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableButtonData.LaunchFlagsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WindowTitle() As String
            Get
                Try 
                    Return CType(Me(Me.tableButtonData.WindowTitleColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'WindowTitle' in table 'ButtonData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableButtonData.WindowTitleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CommandLine() As String
            Get
                Try 
                    Return CType(Me(Me.tableButtonData.CommandLineColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CommandLine' in table 'ButtonData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableButtonData.CommandLineColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MenuData_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableButtonData.MenuData_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'MenuData_Id' in table 'ButtonData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableButtonData.MenuData_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MenuDataRow() As MenuDataRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MenuData_ButtonData")),MenuDataRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MenuData_ButtonData"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCaptionTagNull() As Boolean
            Return Me.IsNull(Me.tableButtonData.CaptionTagColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCaptionTagNull()
            Me(Me.tableButtonData.CaptionTagColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionTagNull() As Boolean
            Return Me.IsNull(Me.tableButtonData.DescriptionTagColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionTagNull()
            Me(Me.tableButtonData.DescriptionTagColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsToolTipTagNull() As Boolean
            Return Me.IsNull(Me.tableButtonData.ToolTipTagColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetToolTipTagNull()
            Me(Me.tableButtonData.ToolTipTagColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImageTagNull() As Boolean
            Return Me.IsNull(Me.tableButtonData.ImageTagColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImageTagNull()
            Me(Me.tableButtonData.ImageTagColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVisibleNull() As Boolean
            Return Me.IsNull(Me.tableButtonData.VisibleColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVisibleNull()
            Me(Me.tableButtonData.VisibleColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActionNull() As Boolean
            Return Me.IsNull(Me.tableButtonData.ActionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActionNull()
            Me(Me.tableButtonData.ActionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLaunchFileNull() As Boolean
            Return Me.IsNull(Me.tableButtonData.LaunchFileColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLaunchFileNull()
            Me(Me.tableButtonData.LaunchFileColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUseFRWMNull() As Boolean
            Return Me.IsNull(Me.tableButtonData.UseFRWMColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUseFRWMNull()
            Me(Me.tableButtonData.UseFRWMColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLaunchFlagsNull() As Boolean
            Return Me.IsNull(Me.tableButtonData.LaunchFlagsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLaunchFlagsNull()
            Me(Me.tableButtonData.LaunchFlagsColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWindowTitleNull() As Boolean
            Return Me.IsNull(Me.tableButtonData.WindowTitleColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWindowTitleNull()
            Me(Me.tableButtonData.WindowTitleColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommandLineNull() As Boolean
            Return Me.IsNull(Me.tableButtonData.CommandLineColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommandLineNull()
            Me(Me.tableButtonData.CommandLineColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMenuData_IdNull() As Boolean
            Return Me.IsNull(Me.tableButtonData.MenuData_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMenuData_IdNull()
            Me(Me.tableButtonData.MenuData_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MenuDataRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As MenuDataRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MenuDataRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MenuDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ButtonDataRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ButtonDataRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ButtonDataRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ButtonDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
