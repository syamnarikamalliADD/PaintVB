<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="FormIcon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\Network.ico;System.Drawing.Icon, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="psARP" xml:space="preserve">
    <value>Arp</value>
  </data>
  <data name="psAUTO_CFG" xml:space="preserve">
    <value>Auto Configure</value>
  </data>
  <data name="psAUTO_CFG_BOOTP_PROMPT1" xml:space="preserve">
    <value>This will fill in the configuration for the BOOTP server.  The changes will not be saved automatically.  Review the output before saving.</value>
  </data>
  <data name="psAUTO_CFG_BOOTP_PROMPT2" xml:space="preserve">
    <value>Auto Configure BOOTP</value>
  </data>
  <data name="psAUTO_CFG_TFTP_PROMPT1" xml:space="preserve">
    <value>This will fill in the configuration for the TFTP server.  The changes will not be saved automatically.  Review the output before saving.</value>
  </data>
  <data name="psAUTO_CFG_TFTP_PROMPT2" xml:space="preserve">
    <value>Auto Configure TFTP</value>
  </data>
  <data name="psBOOTP_CFG" xml:space="preserve">
    <value>Bootp Setup</value>
  </data>
  <data name="psBOOTP_START" xml:space="preserve">
    <value>Start BOOTP</value>
  </data>
  <data name="psBOOTP_STATUS" xml:space="preserve">
    <value>BOOTP Status</value>
  </data>
  <data name="psBOOTP_STOP" xml:space="preserve">
    <value>Stop BOOTP</value>
  </data>
  <data name="psCLEAR_OUTPUT_WINDOW" xml:space="preserve">
    <value>Clear output window</value>
  </data>
  <data name="psCLEAR_WINDOW_QUES" xml:space="preserve">
    <value>Clear Result Window?</value>
  </data>
  <data name="psCONTROLLERS" xml:space="preserve">
    <value>Controllers</value>
  </data>
  <data name="psCOPY_TO_CLIPBOARD" xml:space="preserve">
    <value>Copy to clipboard</value>
  </data>
  <data name="psCUT_TO_CLIPBOARD" xml:space="preserve">
    <value>Cut to clipboard</value>
  </data>
  <data name="psECBR_UPDATE" xml:space="preserve">
    <value>Update BOOTP</value>
  </data>
  <data name="psECBR_UPDATE_SVR_CFG" xml:space="preserve">
    <value>Update BOOTP &amp; TFTP server configuration.</value>
  </data>
  <data name="psFAILED_TO_RUN" xml:space="preserve">
    <value>Failed to run command</value>
  </data>
  <data name="psFANUC_NAME" xml:space="preserve">
    <value>Controller FANUC Name: </value>
  </data>
  <data name="psFANUC_PING" xml:space="preserve">
    <value>FANUC Ping</value>
  </data>
  <data name="psFANUC_PING_FAILED" xml:space="preserve">
    <value>FANUC Ping Failed</value>
  </data>
  <data name="psFANUC_PING_OK" xml:space="preserve">
    <value>FANUC Ping Successful</value>
  </data>
  <data name="psHOSTFILEITEMS" xml:space="preserve">
    <value>Host File Items</value>
  </data>
  <data name="psHOST_FILE" xml:space="preserve">
    <value>Host Names File</value>
  </data>
  <data name="psIP_ADDRESS" xml:space="preserve">
    <value>Controller IPAddress: </value>
  </data>
  <data name="psIP_CONFIG" xml:space="preserve">
    <value>IP Config</value>
  </data>
  <data name="psMANUAL_ADDRESS" xml:space="preserve">
    <value>Manual Address</value>
  </data>
  <data name="psNAME" xml:space="preserve">
    <value>Controller Name: </value>
  </data>
  <data name="psOUTPUT_WINDOW" xml:space="preserve">
    <value>Output Window</value>
  </data>
  <data name="psPASTE_FROM_CLIPBOARD" xml:space="preserve">
    <value>Paste from clipboard</value>
  </data>
  <data name="psPERF_FANUC_PING_ON" xml:space="preserve">
    <value>Performing FANUC Ping On </value>
  </data>
  <data name="psPING" xml:space="preserve">
    <value>Ping</value>
  </data>
  <data name="psPRINT_DOCUMENT" xml:space="preserve">
    <value>Print document</value>
  </data>
  <data name="psSAVED_" xml:space="preserve">
    <value>Saved </value>
  </data>
  <data name="psSAVED_HOSTS" xml:space="preserve">
    <value>Saved hosts file to </value>
  </data>
  <data name="psSAVED_OUTPUT" xml:space="preserve">
    <value>Saved output file to </value>
  </data>
  <data name="psSAVE_DOCUMENT" xml:space="preserve">
    <value>Save document</value>
  </data>
  <data name="psSCREENCAPTION" xml:space="preserve">
    <value>Network Maintenance</value>
  </data>
  <data name="psTFTP_CFG" xml:space="preserve">
    <value>TFTP Setup</value>
  </data>
  <data name="psTFTP_START" xml:space="preserve">
    <value>Start TFTP</value>
  </data>
  <data name="psTFTP_STATUS" xml:space="preserve">
    <value>TFTP Status</value>
  </data>
  <data name="psTFTP_STOP" xml:space="preserve">
    <value>Stop TFTP</value>
  </data>
  <data name="psTRACE_ROUTE" xml:space="preserve">
    <value>Traceroute</value>
  </data>
</root>