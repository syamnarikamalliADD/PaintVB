'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.832
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.832.
'
Namespace Authorization
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="AuthorizationServiceSoap", [Namespace]:="http://localhost/WorksASPAuthorizationService/")>  _
    Partial Public Class AuthorizationService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private LogInOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BuildDSScreenAccessListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogOutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLoginStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://localhost/WorksASPAuthorization/AuthorizationService.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event LogInCompleted As LogInCompletedEventHandler
        
        '''<remarks/>
        Public Event BuildDSScreenAccessListCompleted As BuildDSScreenAccessListCompletedEventHandler
        
        '''<remarks/>
        Public Event LogOutCompleted As LogOutCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLoginStatusCompleted As GetLoginStatusCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WorksASPAuthorizationService/LogIn", RequestNamespace:="http://localhost/WorksASPAuthorizationService/", ResponseNamespace:="http://localhost/WorksASPAuthorizationService/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LogIn(ByVal pUser As String, ByVal pPassword As String, ByRef pErrMsg As String) As ClientScreenListStruct()
            Dim results() As Object = Me.Invoke("LogIn", New Object() {pUser, pPassword, pErrMsg})
            pErrMsg = CType(results(1),String)
            Return CType(results(0),ClientScreenListStruct())
        End Function
        
        '''<remarks/>
        Public Function BeginLogIn(ByVal pUser As String, ByVal pPassword As String, ByVal pErrMsg As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LogIn", New Object() {pUser, pPassword, pErrMsg}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLogIn(ByVal asyncResult As System.IAsyncResult, ByRef pErrMsg As String) As ClientScreenListStruct()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            pErrMsg = CType(results(1),String)
            Return CType(results(0),ClientScreenListStruct())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LogInAsync(ByVal pUser As String, ByVal pPassword As String, ByVal pErrMsg As String)
            Me.LogInAsync(pUser, pPassword, pErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogInAsync(ByVal pUser As String, ByVal pPassword As String, ByVal pErrMsg As String, ByVal userState As Object)
            If (Me.LogInOperationCompleted Is Nothing) Then
                Me.LogInOperationCompleted = AddressOf Me.OnLogInOperationCompleted
            End If
            Me.InvokeAsync("LogIn", New Object() {pUser, pPassword, pErrMsg}, Me.LogInOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogInOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogInCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogInCompleted(Me, New LogInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WorksASPAuthorizationService/BuildDSScreenAccessList", RequestNamespace:="http://localhost/WorksASPAuthorizationService/", ResponseNamespace:="http://localhost/WorksASPAuthorizationService/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BuildDSScreenAccessList(ByVal pUserID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("BuildDSScreenAccessList", New Object() {pUserID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginBuildDSScreenAccessList(ByVal pUserID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("BuildDSScreenAccessList", New Object() {pUserID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndBuildDSScreenAccessList(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BuildDSScreenAccessListAsync(ByVal pUserID As Integer)
            Me.BuildDSScreenAccessListAsync(pUserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BuildDSScreenAccessListAsync(ByVal pUserID As Integer, ByVal userState As Object)
            If (Me.BuildDSScreenAccessListOperationCompleted Is Nothing) Then
                Me.BuildDSScreenAccessListOperationCompleted = AddressOf Me.OnBuildDSScreenAccessListOperationCompleted
            End If
            Me.InvokeAsync("BuildDSScreenAccessList", New Object() {pUserID}, Me.BuildDSScreenAccessListOperationCompleted, userState)
        End Sub
        
        Private Sub OnBuildDSScreenAccessListOperationCompleted(ByVal arg As Object)
            If (Not (Me.BuildDSScreenAccessListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BuildDSScreenAccessListCompleted(Me, New BuildDSScreenAccessListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WorksASPAuthorizationService/LogOut", RequestNamespace:="http://localhost/WorksASPAuthorizationService/", ResponseNamespace:="http://localhost/WorksASPAuthorizationService/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub LogOut()
            Me.Invoke("LogOut", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Function BeginLogOut(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LogOut", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndLogOut(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogOutAsync()
            Me.LogOutAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogOutAsync(ByVal userState As Object)
            If (Me.LogOutOperationCompleted Is Nothing) Then
                Me.LogOutOperationCompleted = AddressOf Me.OnLogOutOperationCompleted
            End If
            Me.InvokeAsync("LogOut", New Object(-1) {}, Me.LogOutOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogOutOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogOutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogOutCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WorksASPAuthorizationService/GetLoginStatus", RequestNamespace:="http://localhost/WorksASPAuthorizationService/", ResponseNamespace:="http://localhost/WorksASPAuthorizationService/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLoginStatus() As String
            Dim results() As Object = Me.Invoke("GetLoginStatus", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLoginStatus(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLoginStatus", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLoginStatus(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLoginStatusAsync()
            Me.GetLoginStatusAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLoginStatusAsync(ByVal userState As Object)
            If (Me.GetLoginStatusOperationCompleted Is Nothing) Then
                Me.GetLoginStatusOperationCompleted = AddressOf Me.OnGetLoginStatusOperationCompleted
            End If
            Me.InvokeAsync("GetLoginStatus", New Object(-1) {}, Me.GetLoginStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLoginStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLoginStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLoginStatusCompleted(Me, New GetLoginStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.832"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/WorksASPAuthorizationService/")>  _
    Partial Public Class ClientScreenListStruct
        
        Private mainMenuIndexField As Integer
        
        Private screenItemArrayField() As ScreenItem
        
        '''<remarks/>
        Public Property MainMenuIndex() As Integer
            Get
                Return Me.mainMenuIndexField
            End Get
            Set
                Me.mainMenuIndexField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ScreenItemArray() As ScreenItem()
            Get
                Return Me.screenItemArrayField
            End Get
            Set
                Me.screenItemArrayField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.832"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/WorksASPAuthorizationService/")>  _
    Partial Public Class ScreenItem
        
        Private sScreenNameField As String
        
        Private nScreenIDField As Integer
        
        Private nPrivilegeIDField As Integer
        
        Private nOptionSpecificIDField As Integer
        
        '''<remarks/>
        Public Property sScreenName() As String
            Get
                Return Me.sScreenNameField
            End Get
            Set
                Me.sScreenNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nScreenID() As Integer
            Get
                Return Me.nScreenIDField
            End Get
            Set
                Me.nScreenIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nPrivilegeID() As Integer
            Get
                Return Me.nPrivilegeIDField
            End Get
            Set
                Me.nPrivilegeIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property nOptionSpecificID() As Integer
            Get
                Return Me.nOptionSpecificIDField
            End Get
            Set
                Me.nOptionSpecificIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub LogInCompletedEventHandler(ByVal sender As Object, ByVal e As LogInCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogInCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ClientScreenListStruct()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ClientScreenListStruct())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub BuildDSScreenAccessListCompletedEventHandler(ByVal sender As Object, ByVal e As BuildDSScreenAccessListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BuildDSScreenAccessListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub LogOutCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetLoginStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetLoginStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLoginStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
