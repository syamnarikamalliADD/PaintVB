' This material is the joint property of FANUC Robotics America and
' FANUC LTD Japan, and must be returned to either FANUC Robotics
' North America or FANUC LTD Japan immediately upon request. This material
' and the information illustrated or contained herein may not be
' reproduced, copied, used, or transmitted in whole or in part in any way
' without the prior written consent of both FANUC Robotics America and
' FANUC LTD Japan.
'
' All Rights Reserved
' Copyright (C) 2006
' FANUC Robotics America
' FANUC LTD Japan
'
' Form/Module: frmMain
'
' Description: Manage and Display Active Alarms, Log Reset Alarms to History Database
' 
'
' Dependancies:  
'
' Language: Microsoft Visual Basic .Net 2005
'
' Author: Speedy and Associates
' FANUC Robotics North America
' 3900 W. Hamlin Road
' Rochester Hills, MI.
'
' Modification history:
'
'    Date       By      Reason                                                                          Version
'   03/20/07    gks     Changed Status column name to Status_col and added Status Property
'   08/07/08    AM      Replace Eq1, Eq2, .... etc with the Real Arm Name for Controllers Alarms and    4.0.0.2
'                       PLC Generated alarms.
'   10/09/08    gks     Add changes from honda - add 16/32 bit switch for alarms generated by PLC       4.0.0.3
'                       New setup field in AlarmManConfig.xml "Use32Bit"
'   11/03/08    rjo     frmMain.Culture - Added code to change language on-the-fly.                     4.0.0.4
'                       frmMain.subDoScreenAction Added culturestring cas to support language selection
'                       frmMain.subInitializeForm msCulture = mLanguage.GetCultureString
'                       frmMain.Load Added support for (passed in) startup culture (language).
'   02/24/09    AM      Make a difference by Type if PLC it is translated.                              4.0.0.5
'   05/01/09    RJO     Adapted for use with PW4.                                                       4.0.0.6
'   11/12/09    MSW     don't write to access anymore - remove subWriteResetAlarmsToDB
'   12/10/09    MSW     tmrNewAlarm_Tick - Copy PT alias changes from Saltillo
'   01/09/10    MSW     tmrNewAlarm_Tick - Add colon to PaintToolAlias search to filter out path names 
'   04/16/10    RJO     Added code to subWriteResetAlarmsToSQLDB to check (and restore if necessary)    4.0.0.7
'                       the SQL Server connection. Also, Changes to clsPLCAlarmDevice AssocData, 
'                       subGetAlarms and moDevicePLCComm_ModuleError to attempt to recover when 
'                       moDevicePLCComm goes out to lunch.
'   11/18/10    AM      clsPLCAlarmDevice::BuildAlarm. Commented out Culture to be force to Default     4.0.0.8
'                       culture and should use Display Culture
'                       frmMain::subInitFormText Added translation for View Options texts
'                       frmMain::Culture Added Code to revome and add filters on the proper
'                       Culture
'   09/14/11    MSW     Assemble a standard version of everything                                       4.1.0.0
'   09/27/11    MSW     Standalone changes round 1 - HGB SA paintshop computer changes					4.1.0.1
'   11/23/11    RJO     Coverted to use HTML Print                                                      4.1.0.2
'   01/13/12    MSW     Support printing of help page, extract the specific alarm       4.01.01.01
'                       from the help file to keep it from getting too big.
'   01/24/12    MSW     Change to new Interprocess Communication in clsInterProcessComm  4.01.01.02
'                       Placeholder include file updates
'   01/25/12    RJO     Fixed an issue in tmrNewAlarm_Tick routine that caused some alarm      4.01.01.03
'                       records to not have some or all of the associated data added to them.
'   02/15/12    MSW     Print error and cancel handling, force 32bit target in project file    4.01.01.04
'   03/08/12    RJO     Modified init for oIPC (Inter Process Comm)                            4.01.02.00
'   04/05/12    MSW     Move PLC link setup from SQL to XML                                    4.01.03.00
'                       Change CommonStrings setup so it'll build correctly
'   04/12/12    MSW     tmrNewAlarm_Tick - Add some error handling in case the robot sends bad data  4.01.03.01
'                       Add text for PLCE messages for PLC EIP slot faults
'                       Read help path from mPWCommon.GetDefaultFilePath instead of registry
'   07/27/12    JBW     Bug fix to PLCAlarms.vb clsPLCAlarmDevice moDevicePLCComm_ModuleError   4.01.03.02
'                       exception recovery code.
'   08/31/12    RJO     Modified mnuAlarmMaskUtility_Click to pass XML Path as a commandline    4.01.03.03
'                       argument to AlarmMask.exe because Paintworks no longer uses Windows
'                       registry.
'   11/02/12    MSW     [PLCAlarms]moDevicePLCComm_ModuleError - Move redim outside of for loop 4.01.03.04
'   11/15/12    HGB     In subInitFormText, hide columns not used in SA                         4.01.03.05
'   12/13/12    MSW     Add some MISComputer updates                                            4.01.03.06
'   02/01/13    ADD/RJO Added 10ms Sleep to tight loops with DoEvents in                        4.01.03.07
'                       subControllerConnectionLost and subDoScreenAction to allow other     
'                       threads to be serviced and as a result, to speed up operation. 
'   04/16/13    MSW     tmrNewAlarm_Tick - Only truncate alarm description if eq# is found at   4.01.05.00
'                       the beginning of the alarm string
'                       Add Canadian resource files
'   06/19/13    RJO     Bug fix to subDoScreenAction.                                           4.01.05.01
'   07/09/13    MSW     Update and standardize logos                                            4.01.05.02
'   07/25/13    MSW     Update alarm messges                                                    4.01.05.03
'   08/20/13    MSW     Progress, Status - Add error handler so it doesn't get hung up          4.01.05.04
'   09/30/13    MSW     Save screenshots as jpegs, PLC DLL                                      4.01.06.00
'                       add a 2nd collection to keep PLC and robot alarms apart, deal
'                       with hyper robot alarms.
'   10/11/13    MSW     subProcessAlarmCollection - prevent Ctype errors on DBNulls             4.01.06.01
'   01/14/14    MSW     frmHelp - Add some error handling when reading wbHelp.DocumentText      4.01.06.02
'   02/13/14    MSW     Switch cross-thread handling to BeginInvoke call                        4.01.07.00
'   03/18/14    MSW     subProcessAlarmCollection - modify handling of PaintTool alias in alarm 4.01.07.01
'                       text to make sure it gets the equipment number
'   04/21/14    MSW     Another PaintTool alarm format                                          4.01.07.02
'   11/20/13    BTK     mcolControllers_AlarmNotification removed hyper robot alarm code.       4.01.07.03
'                       It causes alarms to be missed. Added code for re-entering
'                       mcolControllers_AlarmNotification
'   05/16/14    MSW     Add some details to event log, handle hyper robot alarms                4.01.07.03
'                       Add ability to hide robot alarms with a bypass message
'********************************************************************************************

Option Compare Text
Option Explicit On
Option Strict On

'****** Unfinished Business *****************************************************************
'TODO - Code for Print function maybe needs some work.
'TODO - Make the Active Alarms Dataset visible to other Paintworks GUIs on the network.
'********************************************************************************************

Imports ConnStat = FRRobotNeighborhood.FRERNConnectionStatusConstants
Imports System.Data.OleDb
Imports System.Reflection
Imports System.Resources
Imports System.Xml
Imports System.Xml.XPath
Imports System.Collections.ObjectModel
Imports System.Collections.Generic

Friend Class frmMain

    Inherits System.Windows.Forms.Form

#Region " Declares "

    '******** Project Debug   ***********************************************************************
    'Friend AlarmManTraceListener As New EventLogTraceListener("PW Alarm Manager")
    '******** End Project Debug   *******************************************************************

    '******** Form Constants   **********************************************************************
    ' if msSCREEN_NAME has a space in it you won't find the resources
    Friend Const msSCREEN_NAME As String = "AlarmMan"   ' <-- For password area change log etc.
    Private Const msMODULE As String = "frmMain"
    Private Const msBASE_ASSEMBLY_COMMON As String = msSCREEN_NAME & ".CommonStrings"
    Private Const msBASE_ASSEMBLY_LOCAL As String = msSCREEN_NAME & ".ProjectStrings"
    Private Const msROBOT_ASSEMBLY_LOCAL As String = msSCREEN_NAME & ".RobotStrings"
    Private Const msPLC_ALARM_ASSEMBLY_LOCAL As String = msSCREEN_NAME & ".PLCAlarmStrings"
    Private Const msPW_FACILITY_NAME As String = "PWRK" 'Facility name for internal alarms
    Private Const msSCREEN_DUMP_NAME As String = "AlarmMan_ActiveAlarms.jpg"
    Private Const mnPW_FACILITY_CODE As Integer = -3 'Facility Code number for internal alarms
    '******** End Form Constants    *****************************************************************

    '******** Form Structures   **********************************************************************
    Private Enum eAlarmColumns
        AlarmNumber = 0     '[Alarm#]
        Device = 1          '[Device]
        Description = 2     '[Description]
        Severity = 3        '[Severity]
        CauseMnemonic = 4   '[CauseMnemonic]
        StartSerial = 5     '[Start Serial]
        EndSerial = 6       '[End Serial]
        Zone = 7            '[Zone]
        ProdID = 8          '[Prod ID]         <VIN Number or Carrier Number>
        JobID = 9           '[Job ID]          <Sequence Number>
        StyleNumber = 10    '[Style Number]
        ColorNumber = 11    '[Color Number]
        ValveNumber = 12    '[Valve Number]
        JobName = 13        '[Job Name]
        Process = 14        '[Process]
        Node = 15           '[Node]
        Category = 16       '[Category]
        DowntimeFlag = 17   '[Downtime Flag]
    End Enum

    Private Enum eAlarmSeverityLevel
        Unknown = 0
        SysStop = 1
        OpStop = 2
        Warning = 3
        Message = 4
    End Enum

    Private Enum eDeviceType
        Robot = 0
        PLC = 1
        GUI = 2
    End Enum

    Private Structure udtAlarm
        Public Alarm As Object
        Public Device As String
        Public TimeStamp As DateTime
        Public Type As eDeviceType
    End Structure

    Private Structure udtCellColors
        Public ForeColor As System.Drawing.Color
        Public BackColor As System.Drawing.Color
    End Structure

    Private Structure udtContSize
        Dim ProgBarVisibleSize As Integer
        Dim ProgBarInvisSize As Integer
        Dim SpaceLabelVisbleSize As Integer
        Dim SpaceLabelInvisSize As Integer
    End Structure

    Private Structure udtDisable
        Public sFacilityCode As String
        Public sAlarmNum() As String
    End Structure

    Private Structure udtEquipment
        Public Equipment As Integer
        Public LBound As Integer
        Public Ubound As Integer
    End Structure

    Private Structure udtFilter
        Public Enabled As Boolean
        Public Filter As String
    End Structure

    Private Structure udtInternalAlarm
        Public AlarmNumber As String
        Public Description As String
        Public Severity As String
        Public Zone As Integer
        Public Category As String
        Public Facility As Integer
        Public Status As String
    End Structure
    '******** End Form Structures   ******************************************************************

    '******** Form Variables   **********************************************************************
    Private WithEvents mcolArms As clsArms = Nothing
    Private WithEvents mcolControllers As clsControllers = Nothing
    Private WithEvents mcolPLCAlarmZones As clsPLCAlarmZones = Nothing
    Private mcolZones As clsZones = Nothing

    Private cnnAlarmLog As OleDbConnection
    Private daAlarmLog As New OleDb.OleDbDataAdapter

    Private mcolActiveAlarms As New Collection(Of udtAlarm)
    Private mcolActiveRobotAlarms As New Collection(Of udtAlarm)
    Private mcolFilters As New Collection

    Private dsActiveAlarms As New DataSet
    Private dsDisplayedAlarms As New DataSet
    Private dsLastPoll As New DataSet

    Private mDisable(0) As udtDisable
    Private mAlarmCellColors() As udtCellColors
    Private mPNT1EquipAssign() As udtEquipment
    Private mPNT2EquipAssign() As udtEquipment
    Private mColsSortDir() As SortOrder
    Private mDesktopRec As New Rectangle
    Private mSSSize As udtContSize

    Private mbAutoAck As Boolean = True 'Alarms are removed from the Active Alarms grid when reset.
    Private mbAutoUpdate As Boolean
    Private mbBigBufferMemory As Boolean
    Private mbBusy As Boolean
    Private mbModifying As Boolean = False
    Private mdReading As Boolean = False
    Private mbAddAlarmBusy As Boolean
    Private mbNewAlarmBusy As Boolean
    Private mbEnablePLCAlarms As Boolean
    Private mbEnableRobotAlarms As Boolean
    'MSW 5/14/14 - Hide messages in bypass
    Private msBypassAlarmCode As String = String.Empty
    Private mbInitialized As Boolean
    Private mbInitSeverity As Boolean
    Private mbManualAck As Boolean          'User request to remove reset Alarms from the Active Alarms grid.
    Private mbStatusChange As Boolean       'Alarm Status changed from Active to reset when mbAutoAck = False
    Private mbSupressNewAlarms As Boolean
    '7/11/08 gks
    Private mbRecurseActive As Boolean

    Private mnMaxAlarms As Integer = 200 'Try not to allow the number of alarms in the grid to exceeds this value, (see subDeleteActiveAlarmRows).
    Private mnSequenceNumber As Integer

    Private msAll As String = "ALL" 'Default to English
    Private msHelpFormTitle As String = "Alarm Cause/Remedy Information" 'Default to English
    Private msUpdating As String = "Updating ..." 'Default to English
    Private msAutoRefreshOff As String = "Automatic Refresh is OFF" 'Default to English

    Friend gAlarmsRM As ResourceManager = Nothing   ' PLC Alarm Strings
    Private mfrmCauseRemedy As frmHelp = Nothing

    Friend gnWordHiBit As Integer = 16              'initial values for 16 bit plc words
    Friend gnWordHiBitVal As Long = CLng(2 ^ 16)

    'Windows Messaging variables
    Private msWinMsg As String = String.Empty
    Private mnMsgCount As Integer = 0
    Private mnMsgLen As Integer = 0

    'SQL Database Stuff
    Private mSQLDb As New clsSQLAccess

    'HTML Print stuff
    Friend mPrintHtml As clsPrintHtml
    '******** End Form Variables    *****************************************************************

    '******** Property Variables    *****************************************************************
    Private mnProgress As Integer = 0
    Private mnSeverity As eAlarmSeverityLevel = eAlarmSeverityLevel.Unknown
    Private msCulture As String = "en-US" 'Default to english form text
    Friend gsDefaultCulture As String = "en-US" 'Default to english non-Robot alarm text
    '******** End Property Variables     ************************************************************

    '    10/06/10   MSW     support some ASCII Data
    Friend gbAsciiColor As Boolean = False
    Friend gnAsciiColorNumChar As Integer = 0
    Friend gbAsciiStyle As Boolean = False
    Friend gnAsciiStyleNumChar As Integer = 0

    Dim msHelpPath As String = String.Empty

    '********New program-to-program communication object******************************************
    Friend WithEvents oIPC As Paintworks_IPC.clsInterProcessComm
    Delegate Sub NewMessage_CallBack(ByVal Schema As String, ByVal DS As DataSet)
    '********************************************************************************************
#End Region

#Region " Properties"

    Friend WriteOnly Property Culture() As String
        '********************************************************************************************
        'Description:  Write to this property to change the screen language.
        '
        'Parameters: Culture String (ex. "en-US")
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '11/03/08   rjo     Added code to change language on-the-fly.
        '********************************************************************************************
        Set(ByVal value As String)
            msCulture = value
            'Use current language text for screen labels
            mLanguage.DisplayCultureString = msCulture
            If mLanguage.GetResourceManagers(msBASE_ASSEMBLY_COMMON, msBASE_ASSEMBLY_LOCAL, msROBOT_ASSEMBLY_LOCAL) Then
                Call subInitFormText()
                If mbInitialized Then
                    Do While mcolFilters.Count > 0
                        mcolFilters.Remove(1)
                    Loop
                    Call subConfigureFilters()
                End If
            End If
            'gAlarmsRM = New ResourceManager(msPLC_ALARM_ASSEMBLY_LOCAL, [Assembly].GetExecutingAssembly())
        End Set

    End Property


    Friend ReadOnly Property DisplayCulture() As System.Globalization.CultureInfo
        '********************************************************************************************
        'Description:  The Culture Club
        '
        'Parameters: None
        'Returns:    CultureInfo for current culture.
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Get
            Return New System.Globalization.CultureInfo(msCulture)
        End Get

    End Property

    Friend Property Progress() As Integer
        '********************************************************************************************
        'Description:  run the progress bar
        '
        'Parameters: 1 to 100 percent
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        ' 08/20/13  MSW     Add error handler so it doesn't get hung up during exit
        ' 09/30/13  MSW     Use the control's min and max instead of literal constants
        '********************************************************************************************
        Set(ByVal Value As Integer)
            Try
                If Value < tspProgress.Minimum Then Value = tspProgress.Minimum
                If Value > tspProgress.Maximum Then Value = tspProgress.Minimum
                mnProgress = Value
                tspProgress.Value = mnProgress
                If mnProgress > 0 And mnProgress < 100 Then
                    tspProgress.Visible = True
                Else
                    tspProgress.Visible = False
                End If
                stsStatus.Invalidate()
            Catch ex As Exception
                mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Property: Progress", _
                       "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
            End Try
        End Set
        Get
            Return mnProgress
        End Get
    End Property
    Private WriteOnly Property SeverityLevel() As eAlarmSeverityLevel
        '********************************************************************************************
        'Description: Keeps track of the level of severity of the most severe alarm in Active Alarms.
        '             Uses this level to control the icon on th PW_Main Alarms button.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Set(ByVal value As eAlarmSeverityLevel)

            'Send severity level to PW4_Main
            If mnSeverity <> value Then
                Dim sLevel As String = "unknown"
                'TODO - Should sLevel be "green" if there are no active alarms?
                Select Case value
                    Case eAlarmSeverityLevel.Message
                        sLevel = "green"
                    Case eAlarmSeverityLevel.Warning
                        sLevel = "yellow"
                    Case eAlarmSeverityLevel.OpStop, eAlarmSeverityLevel.SysStop
                        sLevel = "red"
                End Select

                Dim sMessage(1) As String
                sMessage(0) = "alarmlevel"
                sMessage(1) = sLevel
                oIPC.WriteControlMsg(gs_COM_ID_PW_MAIN, sMessage)
                'Call mWorksComm.SendFRWMMessage("alarmlevel," & sLevel & ",0,0,0,0", "PW4_Main")

                mnSeverity = value
            End If 'mnSeverity <> value

        End Set

    End Property

    Friend Property Status(Optional ByVal StatusStrip As Boolean = False) As String
        '********************************************************************************************
        'Description:  Added to jive with common modules
        '
        'Parameters: 
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Get
            Return lblStatus.Text
        End Get

        Set(ByVal Value As String)
            StatusMessage = Value
        End Set

    End Property

    Private Property StatusMessage() As String
        '********************************************************************************************
        'Description:  write status messages statusbar
        '
        'Parameters: none
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
		' 08/20/13  MSW     Add error handler so it doesn't get hung up during exit
        '********************************************************************************************

        Get
            Return lblStatus.Text
        End Get

        Set(ByVal Value As String)
            Try
                lblStatus.Text = Strings.Replace(Value, vbTab, "  ")
            Catch ex As Exception
                mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Property: Status", _
                       "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
            End Try
        End Set

    End Property

#End Region

#Region " Functions"

    Private Function ActiveAlarmExists(ByVal Device As String, ByVal AlarmNumber As String, _
                                       ByVal Description As String, ByVal Type As Integer) As Boolean
        '********************************************************************************************
        'Description:  Loop through each row in the ActiveAlarms table and return True if an alarm
        '              matching the parameters is found.
        '
        'Parameters: Device, AlarmNumber, Description
        'Returns:    True if alarm already exists in active alarm table, False if not.
        '
        'Modification history:
        '
        ' Date      By      Reason
        '02/24/09   AM      Make a difference by Type if PLC it is translated.
        '********************************************************************************************
        Dim bAlarmExists As Boolean = False
        Dim bBogusRecord As Boolean = False

        Try

            For Each drActiveAlarm As DataRow In dsActiveAlarms.Tables("ActiveAlarms").Rows

                'We wouldn't want to imply anything here...
                bBogusRecord = False
                Dim sAlarmNumber As String = TryCast(drActiveAlarm.Item("AlarmNumber"), String)
                If IsNothing(sAlarmNumber) Then
                    sAlarmNumber = String.Empty
                    bBogusRecord = True
                End If
                Dim sDescription As String = TryCast(drActiveAlarm.Item("Description"), String)
                If IsNothing(sDescription) Then
                    sDescription = String.Empty
                    bBogusRecord = True
                End If
                Dim sDevice As String = TryCast(drActiveAlarm.Item("Device"), String)
                If IsNothing(sDevice) Then
                    sDevice = String.Empty
                    bBogusRecord = True
                End If
                Dim nFacility As Integer = 0
                If IsNothing(drActiveAlarm.Item("Facility")) Then
                    bBogusRecord = True
                Else
                    nFacility = DirectCast(drActiveAlarm.Item("Facility"), Integer)
                End If
                Dim sStatus As String = TryCast(drActiveAlarm.Item("Status"), String)
                If IsNothing(sStatus) Then
                    sStatus = String.Empty
                    bBogusRecord = True
                End If
                If bBogusRecord Then
                    mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: ActiveAlarmExists", _
                                           "Error: Invalid record found in ActiveAlarms " & _
                                           "table - Alarm [" & sAlarmNumber & "], " & _
                                           "Device [" & sDevice & "], Desc [" & sDescription & "], " & _
                                           "Facility [" & nFacility.ToString & "]")
                End If
                If sDevice = Device Then
                    'If the Alarm Mnemonic AND the description match (parameters may be different),
                    'set the bAlarmExists flag and exit this loop '05/21/07 RJO
                    '02/24/09 AM. Make a difference by Type if PLC it is translated.
                    Select Case Type
                        Case eDeviceType.PLC
                            If (sAlarmNumber = AlarmNumber) Then
                                If sStatus = "Active" Then bAlarmExists = True
                                Exit For
                            End If
                        Case Else
                            If (sAlarmNumber = AlarmNumber) And (sDescription = Description) Then
                                If sStatus = "Active" Then bAlarmExists = True
                                Exit For
                            End If
                    End Select
                End If 'sDevice) = vsDevice

            Next 'drActiveAlarm 

            Return bAlarmExists

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: ActiveAlarmExists", _
                                   " Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Function

    Private Function bPrintAlarms(ByVal bPrint As Boolean) As Boolean
        '********************************************************************************************
        'Description:  Print the Active Alarms grid
        '
        'Parameters: bPrint - False for Preview or Print to File
        'Returns:    True if success
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Dim bAutoRefresh As Boolean = (mnuAutoRefresh.CheckState = CheckState.Checked)
        Dim bSuccess As Boolean

        Try

            tmrUpdateGrid.Enabled = False

            bSuccess = bPrintdoc(bPrint)

            'Restore the AutoRefresh state to what it was
            tmrUpdateGrid.Enabled = bAutoRefresh
            If bAutoRefresh Then
                Call subRefreshStatus(String.Empty, False)
            Else
                Call subRefreshStatus(msAutoRefreshOff, True, Drawing.Color.LightSalmon)
            End If

            Return bSuccess

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subPrintData", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
            Return False
        End Try

    End Function

    Private Function bPrintdoc(ByVal bPrint As Boolean) As Boolean
        '********************************************************************************************
        'Description:  Data Print Routine
        '
        'Parameters: bPrint - False for Preview or Print to File
        'Returns:    True if success
        '
        'Modification history:
        '
        ' Date      By      Reason
        ' 02/15/12  MSW     Print error and cancel handling
        '********************************************************************************************
        Dim sStatus As String = String.Empty
        Dim sSubTitle(0) As String
        Dim sTitle(1) As String
        Dim bCancel as boolean = false
        Me.Cursor = System.Windows.Forms.Cursors.AppStarting

        Try
            btnPrint.Enabled = False
            Status = gcsRM.GetString("csPRINTING", DisplayCulture)

            Progress = 5

            With mPrintHtml
                '.subSetPageFormat()
                .subClearTableFormat()
                .subSetColumnCfg("align=right", 0)
                .subSetRowcfg("Bold=on", 0, 0)
                .HeaderRowsPerTable = 1

                sTitle(0) = gpsRM.GetString("psSCREENCAPTION", DisplayCulture)
                sTitle(1) = String.Empty
                sSubTitle(0) = mcolZones.SiteName & " - " & mcolZones.ActiveZone.Name

                Progress = 10

                .subStartDoc(Status, gpsRM.GetString("psSCREENCAPTION", DisplayCulture), false, bCancel)
                If not(bCancel) Then
  
                  Progress = 30
  
                  .subAddObject(dgvAlarms, Status, sTitle, sSubTitle)
  
                  Progress = 55
  
                  Status = gcsRM.GetString("csPRINT_FORMATTING", DisplayCulture)
  
                  Progress = 80
  
                  Status = gcsRM.GetString("csPRINT_SENDING", DisplayCulture)
                  .subCloseFile(Status)
                  If bPrint Then
                      .subPrintDoc()
                  End If
                End If
            End With 'mPrintHtml

            Progress = 0
            Status = gcsRM.GetString("csREADY", DisplayCulture)
            Me.Cursor = System.Windows.Forms.Cursors.Default
            btnPrint.Enabled = True

            Return (not(bCancel))

        Catch ex As Exception

            ShowErrorMessagebox(gcsRM.GetString("csPRINTFAILED", DisplayCulture), ex, msSCREEN_NAME, _
                               Status, MessageBoxButtons.OK)

            Progress = 0
            Status = gcsRM.GetString("csREADY", DisplayCulture)
            Me.Cursor = System.Windows.Forms.Cursors.Default
            btnPrint.Enabled = True

            Return False

        End Try

    End Function

    Private Function CausesDowntime(ByVal Severity As String, Optional ByVal sAlarm As String = "") As Boolean
        '********************************************************************************************
        'Description: Returns true if this alarm is a cause of downtime (based on severity level).
        '
        'Parameters: Severity field from alarm object
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        '
        'TODO - Will Severity levels be the same in all languages? Might need to
        '       localize the strings we test for in the Case statement.
        '********************************************************************************************
        Dim bDowntime As Boolean = False

        Select Case Severity.ToUpper
            Case "WARN", "WARNING", "MESSAGE", "NONE"
                bDowntime = False
            Case "STOP", "STOPL", "ABORT", "ABORTL", "PAUSE", "PAUSEL", "SERVO", "SERVO2", "SYSTEM", _
                 "SYS FAULT", "MOSTOP", "MOCANCEL", "OP STOP"
                bDowntime = True
            Case Else
                mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: CausesDowntime", _
                                       "Error: Unrecognized Severity [ " & Severity.ToUpper & "] " & sAlarm)
                bDowntime = False
        End Select

        Return bDowntime

    End Function

    Private Function FilterEnabled() As Boolean
        '********************************************************************************************
        'Description:  Returns True if a Filter is enabled for any column.
        '
        'Parameters: None
        'Returns:    True = Filter(s) Enabled, False = No Filters Enabled
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Dim thisFilter As udtFilter

        Try
            For Each thisFilter In mcolFilters
                If thisFilter.Enabled And thisFilter.Filter <> msAll Then
                    Return True
                End If
            Next
            Return False
        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: FilterEnabled", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
            Return False
        End Try

    End Function

    Private Function GetEquipNumber(ByVal Mnemonic As String) As Integer
        '********************************************************************************************
        'Description:  Returns the equipment number associated with a "PNT1" or "PNT2" alarm.
        '
        'Parameters: None
        'Returns:    Equipment Number
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Dim nEquipNumber As Integer = 0

        Try
            Dim oEquipAssign() As udtEquipment
            Dim oRecord As udtEquipment
            Dim sAlarm() As String = Mnemonic.Split(CType("-", Char))
            Dim nAlarmNum As Integer = CType(sAlarm(1), Integer)

            Select Case sAlarm(0).ToUpper
                Case "PNT1"
                    oEquipAssign = mPNT1EquipAssign
                Case "PNT2"
                    oEquipAssign = mPNT2EquipAssign
                Case Else
                    mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: GetEquipNumber", _
                                           "Error: Invalid Facility Name: " & sAlarm(0).ToUpper)
                    Return nEquipNumber
            End Select

            For nItem As Integer = 0 To oEquipAssign.GetUpperBound(0)
                oRecord = oEquipAssign(nItem)
                With oRecord
                    If (nAlarmNum >= .LBound) And (nAlarmNum <= .Ubound) Then
                        nEquipNumber = .Equipment
                        Exit For
                    End If
                End With
            Next 'nItem

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: GetEquipNumber", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

        Return nEquipNumber

    End Function

    Private Function GetViewSettings(ByVal ViewType As String) As Boolean
        '********************************************************************************************
        'Description:  Read the view settings from AlarmManConfig.xml and set the column visibility 
        '              and dropdown menu item checkbox states based on the supplied ViewType.
        '
        'Parameters: ViewType ("Default" or "User")
        'Returns:    True if operation is successful
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 
        Dim DS As New DataSet
        Dim DR As DataRow = Nothing
        Dim bExists As Boolean = False

        Try
            DS.ReadXmlSchema(mcolZones.DatabasePath & "XML\AlarmManConfig.xsd")
            DS.ReadXml(mcolZones.DatabasePath & "XML\AlarmManConfig.xml")

            'Find the preferences for this ViewType
            For Each DR In DS.Tables("ViewPreference").Rows
                If DR.Item("ViewType").ToString = ViewType Then
                    bExists = True
                    Exit For
                End If
            Next

            If Not bExists Then
                mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: GetViewSettings", _
                                       "Error: View type [" & ViewType & "] not found.")
                GetViewSettings = False
                Exit Function
            End If

            With DR
                If CType(.Item("CauseMnemonic"), Boolean) Then
                    dgvAlarms.Columns("CauseMnemonic").Visible = True
                    mnuCauseColView.CheckState = CheckState.Checked
                Else
                    dgvAlarms.Columns("CauseMnemonic").Visible = False
                    mnuCauseColView.CheckState = CheckState.Unchecked
                End If

                If CType(.Item("Zone"), Boolean) Then
                    dgvAlarms.Columns("Zone").Visible = True
                    mnuZoneColView.CheckState = CheckState.Checked
                Else
                    dgvAlarms.Columns("Zone").Visible = False
                    mnuZoneColView.CheckState = CheckState.Unchecked
                End If

                If CType(.Item("ProdID"), Boolean) Then
                    dgvAlarms.Columns("ProdID").Visible = True
                    mnuProdIDColView.CheckState = CheckState.Checked
                Else
                    dgvAlarms.Columns("ProdID").Visible = False
                    mnuProdIDColView.CheckState = CheckState.Unchecked
                End If

                If CType(.Item("JobID"), Boolean) Then
                    dgvAlarms.Columns("JobID").Visible = True
                    mnuJobIDColView.CheckState = CheckState.Checked
                Else
                    dgvAlarms.Columns("JobID").Visible = False
                    mnuJobIDColView.CheckState = CheckState.Unchecked
                End If

                If CType(.Item("Style"), Boolean) Then
                    dgvAlarms.Columns("Style").Visible = True
                    mnuStyleColView.CheckState = CheckState.Checked
                Else
                    dgvAlarms.Columns("Style").Visible = False
                    mnuStyleColView.CheckState = CheckState.Unchecked
                End If

                If CType(.Item("Color"), Boolean) Then
                    dgvAlarms.Columns("Color").Visible = True
                    mnuStyleColView.CheckState = CheckState.Checked
                Else
                    dgvAlarms.Columns("Color").Visible = False
                    mnuStyleColView.CheckState = CheckState.Unchecked
                End If

                If CType(.Item("Valve"), Boolean) Then
                    dgvAlarms.Columns("Valve").Visible = True
                    mnuValveColView.CheckState = CheckState.Checked
                Else
                    dgvAlarms.Columns("Valve").Visible = False
                    mnuValveColView.CheckState = CheckState.Unchecked
                End If

                If CType(.Item("JobName"), Boolean) Then
                    dgvAlarms.Columns("JobName").Visible = True
                    mnuJobNameColView.CheckState = CheckState.Checked
                Else
                    dgvAlarms.Columns("JobName").Visible = False
                    mnuJobNameColView.CheckState = CheckState.Unchecked
                End If

                If CType(.Item("Process"), Boolean) Then
                    dgvAlarms.Columns("Process").Visible = True
                    mnuProcessColView.CheckState = CheckState.Checked
                Else
                    dgvAlarms.Columns("Process").Visible = False
                    mnuProcessColView.CheckState = CheckState.Unchecked
                End If

                If CType(.Item("Node"), Boolean) Then
                    dgvAlarms.Columns("Node").Visible = True
                    mnuNodeColView.CheckState = CheckState.Checked
                Else
                    dgvAlarms.Columns("Node").Visible = False
                    mnuNodeColView.CheckState = CheckState.Unchecked
                End If

                If CType(.Item("AutoAck"), Boolean) Then
                    dgvAlarms.Columns("Status_col").Visible = False
                    mnuAutoAcknowledge.CheckState = CheckState.Checked
                    mbAutoAck = True
                Else
                    dgvAlarms.Columns("Status_col").Visible = True
                    mnuAutoAcknowledge.CheckState = CheckState.Unchecked
                    mbAutoAck = False
                End If
            End With 'DR

            DR = Nothing
            DS.Dispose()
            GetViewSettings = True

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: GetViewSettings", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
            GetViewSettings = False
        End Try

    End Function

    Private Function HelpFileName(ByVal AlarmCode As String) As String
        '********************************************************************************************
        'Description:  
        '
        'Parameters: Alarm Mnemonic
        'Returns:    HelpFileName
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try
            Dim nPos As Integer = Strings.InStr(AlarmCode, "-")

            If nPos > 0 Then
                Return Strings.Trim(Strings.Left(AlarmCode, nPos - 1))
            Else
                Return String.Empty
            End If

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: HelpFileName", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
            Return String.Empty
        End Try

    End Function

    Private Function LoadInternalAlarmDR(ByRef DR As DataRow, ByVal Alarm As Object) As Boolean
        '********************************************************************************************
        'Description:  AlarmMan has received an Alarm Notification from the GUI. Populate
        '              an ActiveAlarm Data Row with the data from the Internal Alarm Object.
        '
        'Parameters: DataRow, Internal Alarm Object
        'Returns:    True if evertything went OK, False if not
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Try
            Dim oIntAlarm As udtInternalAlarm = DirectCast(Alarm, udtInternalAlarm)

            With DR
                .Item("AlarmNumber") = oIntAlarm.AlarmNumber
                .Item("Description") = oIntAlarm.Description
                .Item("Severity") = oIntAlarm.Severity
                .Item("CauseMnemonic") = String.Empty
                .Item("Zone") = oIntAlarm.Zone
                .Item("ProdID") = String.Empty
                .Item("JobID") = String.Empty
                .Item("Style") = String.Empty
                .Item("Color") = String.Empty
                .Item("Valve") = String.Empty
                .Item("JobName") = String.Empty
                .Item("Process") = String.Empty
                .Item("Node") = 0
                .Item("Category") = oIntAlarm.Category
                .Item("DowntimeFlag") = False
                .Item("Facility") = oIntAlarm.Facility
                .Item("Status") = oIntAlarm.Status
            End With

            Return True

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: LoadInternalAlarmDR", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
            Return False
        End Try

    End Function

    Private Function LoadPLCAlarmDR(ByRef DR As DataRow, ByVal Alarm As Object) As Boolean
        '********************************************************************************************
        'Description:  AlarmMan has received an Alarm Notification from the PLC. Populate
        '              an ActiveAlarm Data Row with the data from the PLC ActiveAlarm Object
        '
        'Parameters: DataRow, PLC ActiveAlarm Object
        'Returns:    True if evertything went OK, False if not
        '
        'Modification history:
        '
        ' Date      By      Reason
        ' 01/21/11  MSW     This is attempting to convert to ascii twice
        '********************************************************************************************
        Try
            Dim oPLCAlarm As clsPLCAlarm = DirectCast(Alarm, clsPLCAlarm)

            With DR
                .Item("AlarmNumber") = oPLCAlarm.AlarmNumber
                .Item("Description") = oPLCAlarm.Description
                .Item("Severity") = oPLCAlarm.Severity
                .Item("CauseMnemonic") = oPLCAlarm.CauseMnemonic
                .Item("Zone") = oPLCAlarm.Zone
                .Item("ProdID") = oPLCAlarm.ProdID                '<VIN Number or Carrier Number>
                .Item("JobID") = oPLCAlarm.JobID                  '<Sequence Number>
                'MSW 1/21/11 - this is attempting to convert to ascii twice
                ''    10/06/10   MSW     support some ASCII Data
                'If gbAsciiStyle AndAlso oPLCAlarm.StyleNumber <> String.Empty Then
                '    .Item("Style") = mMathFunctions.CvIntegerToASCII(CType(oPLCAlarm.StyleNumber, Integer), gnAsciiStyleNumChar)
                'Else
                .Item("Style") = oPLCAlarm.StyleNumber
                'End If
                'If gbAsciiColor AndAlso oPLCAlarm.ColorNumber <> String.Empty Then
                '    .Item("Color") = mMathFunctions.CvIntegerToASCII(CType(oPLCAlarm.ColorNumber, Integer), gnAsciiColorNumChar)
                'Else
                .Item("Color") = oPLCAlarm.ColorNumber
                'End If
                .Item("Valve") = oPLCAlarm.ValveNumber
                .Item("JobName") = String.Empty
                .Item("Process") = String.Empty
                .Item("Node") = 0
                .Item("Category") = oPLCAlarm.Category
                .Item("DowntimeFlag") = CausesDowntime(oPLCAlarm.Severity.ToUpper, .Item("AlarmNumber").ToString)
                .Item("Facility") = oPLCAlarm.ErrorFacility
                .Item("Status") = oPLCAlarm.Status
            End With

            Return True

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: LoadPLCAlarmDR", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
            Return False
        End Try

    End Function

    Private Function LoadRobotAlarmDR(ByRef DR As DataRow, ByVal Alarm As Object) As Integer
        '********************************************************************************************
        'Description:  AlarmMan has received an Alarm Notification from a Robot Controller. Populate
        '              an ActiveAlarm Data Row with the data from the Robot Alarm Object
        '
        'Parameters: DataRow, Robot Alarm Object
        'Returns:    Result code (0=Success, 1=Suppress Alarm, 2=Error or Bad Data in Alarm Object)
        '
        'Modification history:
        '
        ' Date      By      Reason
        ' 05/05/08  RJO     Changed return type from Boolean to Integer to provide calling routine
        '                   with more detail about the result of this operation.
        '********************************************************************************************
        Dim oRobotAlarm As FRRobot.FRCAlarm = Nothing
        Try
            oRobotAlarm = DirectCast(Alarm, FRRobot.FRCAlarm)
            Dim bDowntimeFlag As Boolean
            Dim bSuspectAlarm As Boolean
            Dim nFacility As Integer
            Dim nReturn As Integer
            Dim sFormat As String = String.Empty
            Dim sMsg As String = String.Empty

            With DR
                sFormat = TryCast(oRobotAlarm.ErrorMnemonic, String)
                If IsNothing(sFormat) Then
                    sFormat = String.Empty
                    bSuspectAlarm = True
                Else
                    If sFormat.Length > 1 Then
                        If sFormat.Length < 5 Then
                            Debug.Print(" ")
                            Debug.Print(oRobotAlarm.ErrorMnemonic)
                            Debug.Print(oRobotAlarm.ErrorMessage)
                        End If
                    End If
                End If
                .Item("AlarmNumber") = sFormat
                sMsg = "Alarm: [" & sFormat & "], Device: [" & Name & "], "

                sFormat = TryCast(oRobotAlarm.ErrorMessage, String)
                If IsNothing(sFormat) Then
                    sFormat = String.Empty
                    bSuspectAlarm = True
                End If
                .Item("Description") = sFormat
                sMsg = sMsg & "Desc: [" & sFormat & "], "

                'Severity strings are going to look like "frSevAbort" coming from the robot controller. 
                'Reformat them so they are easier for the operator to read (ex. "frSevAbort" => "ABORT")
                sFormat = TryCast(oRobotAlarm.ErrorSeverity.ToString, String)
                If IsNothing(sFormat) Then
                    sFormat = String.Empty
                    bSuspectAlarm = True
                End If
                'Don't try this on a zero length string
                If Strings.Len(sFormat) > 5 Then
                    sFormat = Strings.Right(sFormat, Strings.Len(sFormat) - 5)
                End If
                'Handle special case: It turns out that the error posting mechanism used by the motion system 
                'on the controller will, at the time the error is ready to be posted, check to see if the 
                'actual motion command associated with the error came from a TP program or not.  If it did not 
                'originate from a TP program (i.e. jogging), then the PAUSE bit is indeed stripped off, 
                'changing the severity from an integer value of 38 to 36.  The robot server does not include 
                '36 as one of its recognized severity values. Probably the best way around this issue is to 
                'treat 36 the same as 4 (frSevMoStop).
                If sFormat = "36" Then sFormat = "MoStop"


                'Handle (another) special case: 'RJO 09/09/2010
                If sFormat = "32" Then sFormat = "WARN"

                'Handle (another) special case: If sFormat turns out to be a number, Bit 7 (Hex 80) represents 
                'the "No Display" option, i.e. the posting of the alarm to the TP alarm log is suppressed. However
                'apparently in this case it still gets passed through the robot server software anyway. So we'll
                'suppress the display of these alarms here by returning False.
                If IsNumeric(sFormat) Then
                    Dim nSeverity As Integer = CType(sFormat, Integer)

                    If (nSeverity And 128) > 0 Then nReturn = 1 'Suppress Alarm Display
                End If

                .Item("Severity") = sFormat.ToUpper
                sMsg = sMsg & "Severity: [" & sFormat.ToUpper & "], "

                'Determine if this alarm causes downtime based on severity and set the flag
                If nReturn <> 1 Then
                    bDowntimeFlag = CausesDowntime(sFormat.ToUpper, .Item("AlarmNumber").ToString)
                End If

                sFormat = TryCast(oRobotAlarm.CauseMnemonic, String)
                If IsNothing(sFormat) Then sFormat = String.Empty
                .Item("CauseMnemonic") = sFormat

                'Set Category to the Facility name
                sFormat = String.Empty
                If (oRobotAlarm.ErrorMnemonic.Length > 1) And (Strings.InStr(oRobotAlarm.ErrorMnemonic, "-") > 1) Then
                    sFormat = Strings.Left(oRobotAlarm.ErrorMnemonic, Strings.InStr(oRobotAlarm.ErrorMnemonic, "-") - 1)
                End If
                .Item("Category") = sFormat

                .Item("DowntimeFlag") = bDowntimeFlag

                'Facility Code - Used to identify Robot RESET and PLC alarms
                If IsNothing(oRobotAlarm.ErrorFacility) Then
                    bSuspectAlarm = True
                Else
                    nFacility = oRobotAlarm.ErrorFacility
                End If
                .Item("Facility") = nFacility
                sMsg = sMsg & "Facility: [" & nFacility.ToString & "]"

                'Set the alarm status to Active.
                .Item("Status") = "Active"
            End With 'drNewAlarm

            If bSuspectAlarm Then
                mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: LoadRobotAlarmDR", _
                                       "Error: Suspect Alarm received - " & sMsg)
                nReturn = 2 'Error in alarm data
            End If

            Return nReturn

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: LoadRobotAlarmDR", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
            Return 2 'Error
            oRobotAlarm = Nothing
        End Try

    End Function

    Private Function MaskedAlarm(ByVal vsMnemonic As String) As Boolean
        '********************************************************************************************
        'Description: Returns true if this alarm is masked. Prevents nuisance alarms from cluttering
        '             the active alarm display and alarm log.
        '
        'Parameters: Alarm Mnmonic string
        'Returns:    True is alarm is masked
        '
        'Modification history:
        '
        ' Date      By      Reason
        '
        '********************************************************************************************
        Dim myEntry As udtDisable
        Dim sAlarmData() As String
        Dim bMasked As Boolean = False

        Try
            'Split the alarm mnemonic into its component parts, Facility Code and Alarm Number.
            sAlarmData = Split(vsMnemonic, "-")

            'Now check if the Facility Code is in the mDisable Array
            For Each myEntry In mDisable
                If myEntry.sFacilityCode = sAlarmData(0).ToUpper Then
                    Dim sAlarm As String = String.Empty
                    'It's there, now see if the specified alarm is blocked.
                    For Each sAlarm In myEntry.sAlarmNum
                        If (sAlarm = "*") Or (sAlarm = sAlarmData(1)) Then
                            bMasked = True
                            Exit For
                        End If
                    Next 'sAlarm 

                End If
            Next 'myEntry

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: MaskedAlarm", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
            Return False
        End Try

        Return bMasked

    End Function

    Private Function PWSeverity(ByVal Severity As String, Optional ByVal sAlarm As String = "") As eAlarmSeverityLevel
        '********************************************************************************************
        'Description:  Returns a numberic severity level constant based on the severity of the alarm.
        '
        'Parameters: Severity Level name
        'Returns:    eAlarmSeverityLevel
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Select Case Severity.ToUpper
            Case "STOP", "STOPL", "ABORT", "ABORTL", "PAUSE", "PAUSEL", "SERVO", "SERVO2", "SYSTEM", "SYS FAULT", "MOSTOP", "MOCANCEL"
                Return eAlarmSeverityLevel.SysStop
            Case "OP STOP"
                Return eAlarmSeverityLevel.OpStop
            Case "WARN", "WARNING", "NONE"
                Return eAlarmSeverityLevel.Warning
            Case "MESSAGE"
                Return eAlarmSeverityLevel.Message
            Case Else
                If Severity <> String.Empty Then
                    mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: PWSeverity", _
                                           "Error: Unrecognized Severity [" & Severity & "] " & sAlarm)
                End If
                Return eAlarmSeverityLevel.Unknown
        End Select

    End Function

    Private Function SaveUserViewSettings() As Boolean
        '********************************************************************************************
        'Description:  Write the current column visibility settings to AlarmManConfig.xml "User" 
        '              ViewType.
        '
        'Parameters: None
        'Returns:    True if save operation success, False if not
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 
        Dim DS As New DataSet
        Dim DR As DataRow = Nothing
        Dim bExists As Boolean = False

        Try
            DS.ReadXmlSchema(mcolZones.DatabasePath & "XML\AlarmManConfig.xsd")
            DS.ReadXml(mcolZones.DatabasePath & "XML\AlarmManConfig.xml")

            'Find the preferences for this ViewType
            For Each DR In DS.Tables("ViewPreference").Rows
                If DR.Item("ViewType").ToString = "User" Then
                    bExists = True
                    Exit For
                End If
            Next

            'There are currently no user view settings. Create them
            If Not bExists Then
                mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: SaveUserViewSettings", _
                                       "Error: View type 'User' not found. Creating new DataRow.")
                DR = DS.Tables("ViewPreference").NewRow
                DR.Item("ViewType") = "User"
            End If

            With DR
                .Item("CauseMnemonic") = (mnuCauseColView.CheckState = CheckState.Checked)
                .Item("Zone") = (mnuZoneColView.CheckState = CheckState.Checked)
                .Item("ProdID") = (mnuProdIDColView.CheckState = CheckState.Checked)
                .Item("JobID") = (mnuJobIDColView.CheckState = CheckState.Checked)
                .Item("Style") = (mnuStyleColView.CheckState = CheckState.Checked)
                .Item("Color") = (mnuColorColView.CheckState = CheckState.Checked)
                .Item("Valve") = (mnuValveColView.CheckState = CheckState.Checked)
                .Item("JobName") = (mnuJobNameColView.CheckState = CheckState.Checked)
                .Item("Process") = (mnuProcessColView.CheckState = CheckState.Checked)
                .Item("Node") = (mnuNodeColView.CheckState = CheckState.Checked)
                .Item("AutoAck") = (mnuAutoAcknowledge.CheckState = CheckState.Checked)
            End With

            If Not bExists Then DS.Tables("ViewPreference").Rows.Add(DR)

            DS.AcceptChanges()
            DS.WriteXml(mcolZones.DatabasePath & "XML\AlarmManConfig.xml")

            DR = Nothing
            DS.Dispose()
            SaveUserViewSettings = True

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: SaveUserViewSettings", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
            SaveUserViewSettings = False
        End Try

    End Function

#End Region

#Region " Routines"

    Private Sub subAddAlarmNumber(ByRef ThisAlarm As udtDisable, ByVal AlarmNumber As String)
        '********************************************************************************************
        'Description:  
        '
        'Parameters: ThisAlarm, AlarmNumber
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Try

            If AlarmNumber = "*" Then
                'Block all alarms for this Facility code
                ReDim ThisAlarm.sAlarmNum(0)
                ThisAlarm.sAlarmNum(0) = AlarmNumber
            Else
                'if all alarms aren't blocked for this Facility Code, add this alarm to the list
                If ThisAlarm.sAlarmNum(0) <> "*" Then
                    Dim nLen As Integer = ThisAlarm.sAlarmNum.GetLength(0)
                    ReDim Preserve ThisAlarm.sAlarmNum(nLen)
                    ThisAlarm.sAlarmNum(nLen) = AlarmNumber
                End If
            End If

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subAddAlarmNumber", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub subAddMaskedAlarm(ByVal FacilityName As String, ByVal AlarmNumber As String)
        '********************************************************************************************
        'Description:  
        '
        'Parameters: FacilityName, AlarmNumber
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Dim myEntry As udtDisable
        Dim bFacFound As Boolean = False

        Try
            'First, check if mDisable is empty
            If mDisable(0).sFacilityCode = String.Empty Then

                mDisable(0).sFacilityCode = FacilityName.ToUpper
                mDisable(0).sAlarmNum(0) = AlarmNumber

            Else
                Dim nIndex As Integer = 0

                For nIndex = 0 To mDisable.GetUpperBound(0)
                    myEntry = mDisable(nIndex)
                    If FacilityName.ToUpper = myEntry.sFacilityCode Then
                        Dim sAlarm As String = String.Empty
                        Dim bBlocked As Boolean = False
                        bFacFound = True
                        For Each sAlarm In myEntry.sAlarmNum
                            If (sAlarm = AlarmNumber) Then
                                bBlocked = True
                                Exit For
                            End If
                        Next
                        If Not bBlocked Then
                            'Facility Code exisits - add blocked alarm
                            Call subAddAlarmNumber(myEntry, AlarmNumber)
                            'Update the array
                            mDisable(nIndex) = myEntry
                        End If
                        Exit For
                    End If
                Next 'nIndex

                If Not bFacFound Then
                    'Facility Code does not exisit - add an element to mDisable
                    Dim nLen As Integer = mDisable.GetLength(0)
                    ReDim Preserve mDisable(nLen)
                    ReDim mDisable(nLen).sAlarmNum(0)
                    mDisable(nLen).sFacilityCode = FacilityName.ToUpper
                    mDisable(nLen).sAlarmNum(0) = AlarmNumber
                End If

            End If 'mDisable(0).sFacilityCode = String.Empty

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subAddMaskedAlarm", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub subAddNewAlarmToCollection(ByVal Alarm As udtAlarm)
        '********************************************************************************************
        'Description:  Only add new alarms to the collection in one place.
        '
        'Parameters: Alarm - The alarm to add
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason 
        '01/05/11   RJO     Reset mbAddAlarmBusy in exception handled to prevent this thing from 
        '                   locking itself out for good.
        '********************************************************************************************

        Try

            If IsNothing(Alarm) Then
                mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subAddNewAlarmToCollection", _
                                       "Alarm = Nothing! Exiting sub.")
                Exit Sub
            End If
            If Not mbAddAlarmBusy Then
                mbAddAlarmBusy = True
                Dim bFound As Boolean = False
                mcolActiveRobotAlarms.Add(Alarm)
                'Control.CheckForIllegalCrossThreadCalls = False
                'lblRobotAlarms.Text = mcolActiveRobotAlarms.Count.ToString
                'Control.CheckForIllegalCrossThreadCalls = True
                mbAddAlarmBusy = False
            Else
                'So, we might miss one once in a blue moon. It's better than the collection throwing an 
                'unhandled Exception!
                mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subAddNewAlarmToCollection", _
                                       "Error: subAddNewAlarmToCollection was re-entered! Exiting sub.")
                Exit Sub
            End If

        Catch ex As Exception
            mbAddAlarmBusy = False 'RJO 01/05/11
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subAddNewAlarmToCollection", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub subBuildEquipAssignArray(ByVal FacilityName As String, ByRef EquipAssign() As udtEquipment)
        '********************************************************************************************
        'Description:  Build an array that holds data to determine which equipment a process alarm 
        '              belongs to.
        '
        'Parameters: FacilityName "PNT1", "PNT2"
        '            EquipAssign  Array of alarm number range data
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Dim sPath As String = "//EquipAssignment[Facility='" & FacilityName & "']"
        Dim sXMLPath As String = String.Empty
        Dim oNodeList As XmlNodeList
        Dim oXMLDoc As New XmlDocument

        Try
            If mPWCommon.GetDefaultFilePath(sXMLPath, eDir.XML, String.Empty, "RobotAlarmConfig.xml") Then
                oXMLDoc.Load(sXMLPath)
                oNodeList = oXMLDoc.SelectNodes(sPath)
            Else
                Exit Sub
            End If

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subBuildEquipAssignArray", _
                                   "Error: Invalid XPath syntax [" & sPath & "] - " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
            Exit Sub
        End Try

        Try
            If oNodeList.Count = 0 Then
                mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subBuildEquipAssignArray", _
                                       "Error: Facility [" & FacilityName & "] not found.")
            Else
                Dim nItem As Integer
                Dim oAlarmRange As udtEquipment

                For Each oNode As XmlNode In oNodeList
                    With oAlarmRange
                        .Equipment = CType(oNode.Item("Equipment").InnerXml, Integer)
                        .LBound = CType(oNode.Item("LBound").InnerXml, Integer)
                        .Ubound = CType(oNode.Item("UBound").InnerXml, Integer)
                    End With 'oAlarmRange
                    ReDim Preserve EquipAssign(nItem)
                    EquipAssign(nItem) = oAlarmRange
                    nItem += 1
                Next 'oNode
            End If 'oNodeList.Count = 0

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subBuildEquipAssignArray", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub subCheckSeverity()
        '********************************************************************************************
        'Description:  Set SeverityLevel to the level of the most severe alarm in the ActiveAlarms
        '              datatable.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Dim nSeverity As eAlarmSeverityLevel = eAlarmSeverityLevel.Unknown
        Dim nTemp As eAlarmSeverityLevel = eAlarmSeverityLevel.Unknown
        Dim sSeverity As String = String.Empty
        Dim nRowCount As Integer = dsActiveAlarms.Tables("ActiveAlarms").Rows.Count

        Try

            If nRowCount > 0 Then
                Dim nLoopCount As Integer = 0
                Dim sStatus As String = String.Empty

                For Each DR As DataRow In dsActiveAlarms.Tables("ActiveAlarms").Rows
                    sSeverity = TryCast(DR.Item("Severity"), String)
                    If IsNothing(sSeverity) Then
                        sSeverity = "NONE"
                        mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subCheckSeverity", _
                                               "Error: Encountered DataRow with Severity = DBNull, RowCount = " & _
                                               nRowCount & ", Row = " & nLoopCount)
                    End If

                    sStatus = TryCast(DR.Item("Status"), String)
                    If sStatus = "Active" Then
                        nTemp = PWSeverity(sSeverity, DR.Item("AlarmNumber").ToString)
                    End If

                    If (nTemp > eAlarmSeverityLevel.Unknown) And (nTemp <> nSeverity) Then
                        If nSeverity = eAlarmSeverityLevel.Unknown Then
                            nSeverity = nTemp
                        Else
                            If nTemp < nSeverity Then nSeverity = nTemp
                        End If
                    End If
                    nLoopCount += 1
                Next 'DR
                'If we didn't find any Active alarms, make the bell green
                If nSeverity = eAlarmSeverityLevel.Unknown Then nSeverity = eAlarmSeverityLevel.Message
            Else
                nSeverity = eAlarmSeverityLevel.Message
            End If

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subCheckSeverity", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        Finally
            SeverityLevel = nSeverity
        End Try

    End Sub

    Private Sub subConfigAlarmMan(ByVal DataFilePath As String)
        '********************************************************************************************
        'Description:  Retrieve AlarmMan configuration data from XML datafile.
        '
        'Parameters: Path to data file
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '10/08/08   gks     Add 32 bit
        '******************************************************************************************** 
        Dim DS As New DataSet
        Dim DR As DataRow = Nothing

        Try
            DS.ReadXmlSchema(DataFilePath & "XML\AlarmManConfig.xsd")
            DS.ReadXml(DataFilePath & "XML\AlarmManConfig.xml")
            DR = DS.Tables("Configuration").Rows(0)

            With DR
                mnMaxAlarms = CType(.Item("MaxAlarms"), Integer)
                mbEnablePLCAlarms = CType(.Item("EnablePLCAlarms"), Boolean)
                mbEnableRobotAlarms = CType(.Item("EnableRobotAlarms"), Boolean)
                '10/8/08 gks
                If CType(.Item("Use32Bit"), Boolean) Then
                    gnWordHiBit = 32
                    gnWordHiBitVal = CType((2 ^ 32), Long)
                End If
                'MSW 5/14/14 - Hide messages in bypass
                If DR.Table.Columns.Contains("BypassAlarmCode") Then
                    Try
                        msBypassAlarmCode = .Item("BypassAlarmCode").ToString
                    Catch ex As Exception
                        msBypassAlarmCode = String.Empty
                    End Try
                Else
                    msBypassAlarmCode = String.Empty
                End If
                
            End With

            DR = Nothing
            DS.Dispose()

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subConfigAlarmMan", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub


    Private Sub subConfigureFilters()
        '********************************************************************************************
        'Description:  Create a collection of Filter information for each column in the grid.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Dim DS As New DataSet
        Dim DR As DataRow = Nothing

        Try

            DS.ReadXmlSchema(mcolZones.DatabasePath & "XML\AlarmManConfig.xsd")
            DS.ReadXml(mcolZones.DatabasePath & "XML\AlarmManConfig.xml")
            DR = DS.Tables("FilterEnable").Rows(0)

            For nCol As Integer = 0 To (dgvAlarms.ColumnCount - 1)
                Dim thisFilter As New udtFilter

                thisFilter.Filter = msAll
                thisFilter.Enabled = CType(DR.Item(dgvAlarms.Columns(nCol).Name), Boolean)
                mcolFilters.Add(thisFilter, dgvAlarms.Columns(nCol).Name)
                thisFilter = Nothing
            Next 'nCol

            mnuRemoveFilters.Enabled = False

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subConfigureFilters", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub subConfigureGrid()
        '********************************************************************************************
        'Description:  Configure the appearance of the Active Alarm grid.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '10/9/08    gks     Add Time Format
        '********************************************************************************************
        Try
            'make cell width autosize
            dgvAlarms.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells
            'default black forecolor
            dgvAlarms.ForeColor = System.Drawing.Color.Black
            ' BOLD text in all cells - NOT
            For nCol As Integer = 0 To (dgvAlarms.Columns.Count - 1)
                dgvAlarms.Columns(nCol).DefaultCellStyle.Font = New Font(dgvAlarms.Font, FontStyle.Regular)
                If dgvAlarms.Columns(nCol).HeaderText = gpsRM.GetString("psSTART_COL_CAP") Then
                    dgvAlarms.Columns(nCol).DefaultCellStyle.Format = "T" ' long time
                End If
            Next 'nCol

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subConfigureGrid", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub


    Private Sub subControllerConnectionLost(ByVal ControllerName As String)
        '********************************************************************************************
        'Description:  The frrobot connection to this controller has been lost. Make sure the
        '              ActiveAlarms datatable is in a stable state, then remove all robot controller
        '              alarms from this device and log them in the database.
        '
        'Parameters: ControllerName
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        ' 02/01/13 ADD/RJO  Added 10ms Sleep to tight loop with DoEvents to speed up operation.
        '********************************************************************************************

        Do
            Application.DoEvents()
            Threading.Thread.Sleep(10)
        Loop Until tmrNewAlarm.Enabled

        mbSupressNewAlarms = True

        Call subResetActiveAlarms(ControllerName, "*", String.Empty)

        mbSupressNewAlarms = False

    End Sub

    Private Sub subDeleteActiveAlarmRows(ByRef AlarmTable As DataTable)
        '********************************************************************************************
        'Description:  Delete the Active Alarm rows that are marked Reset.
        '
        'Parameters: Active Alarm DataTable
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Try
            Dim nResetAlarms As Integer = 0

            For Each drAlarm As DataRow In AlarmTable.Rows
                Dim sStatus As String = DirectCast(drAlarm.Item("Status"), String)

                If Strings.Left(sStatus, 5) = "Reset" Then
                    If mbAutoAck Or mbManualAck Then
                        drAlarm.Delete()
                    Else
                        nResetAlarms += 1
                        If Strings.Right(sStatus, 1) <> "." Then
                            'This alarm has just been logged. Mark it by appending a "." to the Status field
                            drAlarm.Item("Status") = sStatus & "."
                            drAlarm.AcceptChanges()
                            mbStatusChange = True
                        End If
                    End If 'mbAutoAck Or mbManualAck
                End If 'Strings.Left(sStatus, 5) = "Reset"
            Next 'drAlarm

            If Not mbAutoAck Then
                If (AlarmTable.Rows.Count > mnMaxAlarms) And (nResetAlarms > 0) Then
                    'Delete as many of the oldest Reset rows it takes to get us down to the maximum we 
                    'want to keep in the grid.
                    Dim nRowsToDelete As Integer = AlarmTable.Rows.Count - mnMaxAlarms
                    Dim nCounter As Integer = 0

                    If nRowsToDelete > nResetAlarms Then nRowsToDelete = nResetAlarms
                    For Each drAlarm As DataRow In AlarmTable.Rows
                        Dim sStatus As String = DirectCast(drAlarm.Item("Status"), String)

                        If Strings.Left(sStatus, 5) = "Reset" Then
                            nCounter += 1
                            If nCounter >= (nResetAlarms - nRowsToDelete) Then drAlarm.Delete()
                        End If 'Strings.Left(sStatus, 5) = "Reset"
                    Next 'drAlarm

                End If
            End If

            AlarmTable.AcceptChanges()

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subDeleteActiveAlarmRows", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        Finally
            mbManualAck = False
        End Try

    End Sub

    Private Sub subDestroyHelpForm()
        '********************************************************************************************
        'Description:  Kill the Cause/Remedy Help Viewer form.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Try

            If Not IsNothing(mfrmCauseRemedy) Then
                mfrmCauseRemedy.Hide()
                mfrmCauseRemedy.Dispose()
                mfrmCauseRemedy = Nothing
            End If

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subDestroyHelpForm", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub
    Private Sub subDoScreenAction(ByRef DR As DataRow)
        '********************************************************************************************
        'Description:  AlarmMan has received a command from another Paintworks application.
        '
        'Parameters: Command to execute
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        ' 11/03/08  rjo     Added culturestring case to support language selection
        ' 02/01/13  ADD/RJO Added 10ms Sleep to tight loop with DoEvents to speed up operation.
        ' 06/19/13  RJO     Was not updating robot status icons on maximize unless this was an MIS
        '                   computer.
        '******************************************************************************************** 
        'Trace.WriteLine(Threading.Thread.CurrentThread.Name & " " & mScreenCommand.ScreenAction & " Recieved")
        Try

            Select Case DR.Item(Paintworks_IPC.clsInterProcessComm.sCOL_ACTION).ToString.ToLower

                Case "culturestring"
                    Culture = DR.Item(Paintworks_IPC.clsInterProcessComm.sCOL_PARAMETER).ToString.ToLower

                Case "setproperties"
                    'Future - for whatever commands we may need to pass to this app.

                Case "initseverity"
                    mbInitSeverity = True

                Case "setmaximizedbounds"
                    Dim recMyRectangle As Rectangle

                    With recMyRectangle
                        .X = CType(DR.Item(Paintworks_IPC.clsInterProcessComm.sCOL_LEFT), Integer)
                        .Y = CType(DR.Item(Paintworks_IPC.clsInterProcessComm.sCOL_TOP), Integer)
                        .Width = CType(DR.Item(Paintworks_IPC.clsInterProcessComm.sCOL_WIDTH), Integer)
                        .Height = CType(DR.Item(Paintworks_IPC.clsInterProcessComm.sCOL_HEIGHT), Integer)
                    End With

                    Me.MaximizedBounds = recMyRectangle

                Case "maximize"
                    If Me.WindowState = FormWindowState.Maximized Then
                        'Speedy wants to minimize this screen but doesn't want to move the mouse
                        subDestroyHelpForm()
                        'Call subRefreshGrid() 'RJO 12/05/11
                        Me.WindowState = FormWindowState.Minimized
                        'Me.TopMost = False
                    Else
                        Me.WindowState = FormWindowState.Maximized
                        'Me.TopMost = True

                        lblRobotAlarms.Visible = False
                        lblPLCAlarms.Visible = False

                        Call subSetUpStatusStrip()
                        Progress = 50

                        'SeverityLevel = eAlarmSeverityLevel.Unknown 'RJO 12/05/11
                        'Call subCheckSeverity() 'RJO 12/05/11

                        Progress = 75
                        If Not mcolZones.MISComputer Then  'RJO 06/19/13 Added "Not"
                            For Each o As clsController In mcolControllers
                                Call subDoStatusBar(o)
                            Next
                        End If

                        Progress = 0
                    End If

                Case "minimize"
                    Call subDestroyHelpForm()
                    Me.WindowState = FormWindowState.Minimized

                Case "normal"
                    Me.WindowState = FormWindowState.Normal

                Case "resize"
                    'This function was replaced by MoveWindow API call in PW_Main
                    Me.WindowState = FormWindowState.Normal
                    Me.SetBounds(CType(DR.Item(Paintworks_IPC.clsInterProcessComm.sCOL_LEFT), Integer), _
                                 CType(DR.Item(Paintworks_IPC.clsInterProcessComm.sCOL_TOP), Integer), _
                                 CType(DR.Item(Paintworks_IPC.clsInterProcessComm.sCOL_WIDTH), Integer), _
                                 CType(DR.Item(Paintworks_IPC.clsInterProcessComm.sCOL_HEIGHT), Integer))
                Case "close"
                    'Make sure the ActiveAlarms datatable is stable before we do anything. 
                    Do
                        Application.DoEvents()
                        Threading.Thread.Sleep(10)
                    Loop Until tmrNewAlarm.Enabled
                    mbSupressNewAlarms = True
                    'Log all of the active alarms
                    Call subResetActiveAlarms("*", "*", String.Empty)

                    'Get outta Dodge
                    Application.Exit()
                    Me.Close()

            End Select

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subDoScreenAction", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub subDoStatusBar(ByVal Controller As clsController)
        '********************************************************************************************
        'Description: do the icons on the status bar - set up for up to 10 robots
        '
        'Parameters: Controller that raised the event
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Try
            Dim sTipText As String = String.Empty
            Dim sImgKey As String = String.Empty
            Dim Culture As System.Globalization.CultureInfo = DisplayCulture

            'find the label we want
            Dim sName As String = "lbl" & Controller.Name

            Dim l As ToolStripStatusLabel = DirectCast(stsStatus.Items(sName), ToolStripStatusLabel)
            If l Is Nothing Then Exit Sub

            Select Case (Controller.RCMConnectStatus)
                Case ConnStat.frRNConnecting
                    sImgKey = "imgSBRYellow"
                    sTipText = gcsRM.GetString("csCONNECTING", Culture)
                Case ConnStat.frRNDisconnecting
                    sImgKey = "imgSBRYellow"
                    sTipText = gcsRM.GetString("csDISCONNECTING", Culture)
                Case ConnStat.frRNAvailable
                    sImgKey = "imgSBRBlue"
                    sTipText = gcsRM.GetString("csAVAILABLE", Culture)
                Case ConnStat.frRNConnected
                    sImgKey = "imgSBRGreen"
                    sTipText = gcsRM.GetString("csCONNECTED", Culture)
                Case ConnStat.frRNUnavailable
                    sImgKey = "imgSBRRed"
                    sTipText = gcsRM.GetString("csUNAVAILABLE", Culture)
                Case ConnStat.frRNUnknown
                    sImgKey = "imgSBRGrey"
                    sTipText = gcsRM.GetString("csUNKNOWN", Culture)
                Case ConnStat.frRNHeartbeatLost
                    sImgKey = "imgSBRRed"
                    sTipText = gcsRM.GetString("csHBLOST", Culture)
            End Select

            l.ToolTipText = Controller.Name & " " & _
                                gcsRM.GetString("csCONNECTION_STAT", Culture) & " " & sTipText

            l.Image = DirectCast(gcsRM.GetObject(sImgKey), Image)

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subDoStatusBar", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub subFilterGrid()
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 
        Dim DR As DataRow
        Dim thisFilter As udtFilter
        Dim sColName As String = String.Empty

        Try
            For nRow As Integer = (dsDisplayedAlarms.Tables("ActiveAlarms").Rows.Count - 1) To 0 Step -1
                DR = dsDisplayedAlarms.Tables("ActiveAlarms").Rows(nRow)
                For nCol As Integer = 0 To dgvAlarms.ColumnCount - 1
                    thisFilter = CType(mcolFilters(dgvAlarms.Columns(nCol).Name), udtFilter)
                    If thisFilter.Enabled And thisFilter.Filter <> msAll Then
                        If CType(DR.Item(dgvAlarms.Columns(nCol).DataPropertyName), String) <> thisFilter.Filter Then
                            dsDisplayedAlarms.Tables("ActiveAlarms").Rows(nRow).Delete()
                            Exit For
                        End If
                    End If
                Next 'nCol
            Next 'nRow
        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subFilterGrid", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub subInitAlarmCellColors()
        '********************************************************************************************
        'Description:  Initialize the array that contains the cell text (ForeColor) and background
        '              (BackColor) that are used depending on the severity leve of the alarm.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 
        ReDim mAlarmCellColors(4)

        mAlarmCellColors(eAlarmSeverityLevel.Unknown).ForeColor = Drawing.Color.Gray
        mAlarmCellColors(eAlarmSeverityLevel.Unknown).BackColor = Drawing.Color.White

        mAlarmCellColors(eAlarmSeverityLevel.SysStop).ForeColor = Drawing.Color.Black
        mAlarmCellColors(eAlarmSeverityLevel.SysStop).BackColor = Drawing.Color.Salmon

        mAlarmCellColors(eAlarmSeverityLevel.OpStop).ForeColor = Drawing.Color.Black
        mAlarmCellColors(eAlarmSeverityLevel.OpStop).BackColor = Drawing.Color.LightSalmon

        mAlarmCellColors(eAlarmSeverityLevel.Warning).ForeColor = Drawing.Color.Black
        mAlarmCellColors(eAlarmSeverityLevel.Warning).BackColor = Drawing.Color.Khaki

        mAlarmCellColors(eAlarmSeverityLevel.Message).ForeColor = Drawing.Color.Black
        mAlarmCellColors(eAlarmSeverityLevel.Message).BackColor = Drawing.Color.PaleGreen

    End Sub

    Private Sub subInitAlarms(ByVal DataFilePath As String)
        '********************************************************************************************
        'Description:  Create the structure that will hold information about alarms that will be 
        '              masked (Not logged).
        '
        'Parameters: Path to data file
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 
        Dim nItems As Integer = 0
        Dim nItem As Integer = 0
        Dim sFacilityName As String = String.Empty
        Dim sAlarmNumber As String = String.Empty
        Dim dsMaskedAlarmData As New DataSet

        Try
            'Read masked alarms from XML file and load data structure
            ReDim mDisable(0).sAlarmNum(0)

            With dsMaskedAlarmData
                .ReadXmlSchema(DataFilePath & "XML\MaskedAlarms.xsd")
                .ReadXml(DataFilePath & "XML\MaskedAlarms.xml")

                nItems = .Tables("Alarm").Rows.Count
                For nItem = 0 To nItems - 1
                    sFacilityName = TryCast(.Tables("Alarm").Rows(nItem)("FacilityName"), String)
                    sAlarmNumber = TryCast(.Tables("Alarm").Rows(nItem)("AlarmNumber"), String)
                    Call subAddMaskedAlarm(sFacilityName, sAlarmNumber)
                Next
                .Dispose()
            End With

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subInitAlarms", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub subInitFormText()
        '********************************************************************************************
        'Description: load text for form labels etc
        '
        'Parameters: none
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        ' 11/15/12   HGB     Hide columns not used in SA
        '********************************************************************************************
        Dim Culture As System.Globalization.CultureInfo = DisplayCulture

        Try
            'Initialize Main Toolstip
            With tlsMain
                .SuspendLayout()
                .Top = 0
                .Left = 0
                .AllowDrop = False
                .AllowItemReorder = False
                .AllowMerge = False
                .AutoSize = False
                .Stretch = True
                .GripStyle = ToolStripGripStyle.Hidden
                .ShowItemToolTips = True

                For Each o As ToolStripItem In .Items
                    Select Case o.Name
                        Case "btnClose"
                            o.Text = gcsRM.GetString("csCLOSE", Culture)
                            o.ToolTipText = gpsRM.GetString("psCLOSE_TT", Culture)
                            o.Enabled = True
                            o.Image = DirectCast(gcsRM.GetObject("imgClose", Culture), Image)
                        Case "btnPrint"
                            Dim os As ToolStripSplitButton = _
                                DirectCast(o, ToolStripSplitButton)
                            os.Text = gcsRM.GetString("csPRINT")
                            os.ToolTipText = gpsRM.GetString("psPRINT_TT", Culture)
                            os.Enabled = True
                            os.Image = DirectCast(gcsRM.GetObject("imgPrint", Culture), Image)
                            With os.DropDownItems("mnuPrint")
                                .Text = gcsRM.GetString("csPRINTMNU", Culture)
                                .ToolTipText = gpsRM.GetString("psPRINT_TT", Culture)
                                .Enabled = True
                            End With
                            With os.DropDownItems("mnuPrintPreview")
                                .Text = gcsRM.GetString("csPRINT_PREVIEW", Culture)
                                .ToolTipText = gpsRM.GetString("psPRINT_PREVIEW_MNU_TT", Culture)
                                .Enabled = True
                            End With
                            With os.DropDownItems("mnuPageSetup")
                                .Text = gcsRM.GetString("csPAGE_SETUP", Culture)
                                .ToolTipText = gpsRM.GetString("psPAGE_SETUP_MNU_TT", Culture)
                                .Enabled = True
                            End With
                            With os.DropDownItems("mnuPrintFile")
                                .Text = gcsRM.GetString("csPRINT_FILE", Culture)
                                .ToolTipText = gpsRM.GetString("psPRINT_FILE_MNU_TT", Culture)
                                .Enabled = True
                            End With
                            With os.DropDownItems("mnuPrintOptions")
                                .Text = gcsRM.GetString("csPRINT_OPTIONS", Culture)
                                .ToolTipText = gpsRM.GetString("psPRINT_OPTIONS_MNU_TT", Culture)
                                .Enabled = True
                            End With
                        Case "btnRefresh"
                            Dim os As ToolStripSplitButton = DirectCast(o, ToolStripSplitButton)
                            os.Text = gpsRM.GetString("psREFRESH", Culture)
                            os.ToolTipText = gpsRM.GetString("psREFRESH_TT", Culture)
                            os.Enabled = True
                            os.Image = DirectCast(gcsRM.GetObject("imgRestore", Culture), Image)
                            With os.DropDownItems("mnuAutoRefresh")
                                .Text = gpsRM.GetString("psAUTO_REFR_MNU", Culture)
                                .ToolTipText = gpsRM.GetString("psAUTO_REFR_MNU_TT", Culture)
                                .Enabled = True
                            End With
                            With os.DropDownItems("mnuAutoAcknowledge")
                                .Text = gpsRM.GetString("psAUTO_ACK_MNU", Culture)
                                .ToolTipText = gpsRM.GetString("psAUTO_ACK_MNU_TT", Culture)
                                .Enabled = True
                            End With
                            With os.DropDownItems("mnuRemoveFilters")
                                .Text = gpsRM.GetString("psREM_FILT_MNU", Culture)
                                .ToolTipText = gpsRM.GetString("psREM_FILT_MNU_TT", Culture)
                                .Enabled = True
                            End With
                            With os.DropDownItems("mnuRemoveSort")
                                .Text = gpsRM.GetString("psREM_SORT_MNU", Culture)
                                .ToolTipText = gpsRM.GetString("psREM_SORT_MNU_TT", Culture)
                                .Enabled = True
                            End With
                        Case "btnView"
                            Dim os As ToolStripSplitButton = DirectCast(o, ToolStripSplitButton)
                            os.Text = gpsRM.GetString("psVIEW", Culture)
                            os.ToolTipText = gpsRM.GetString("psVIEW_TT", Culture)
                            os.Enabled = True
                            os.Image = DirectCast(gcsRM.GetObject("imgView", Culture), Image)
                            With os.DropDownItems("mnuOptions")
                                .Text = gpsRM.GetString("psOPTIONS_MNU", Culture)
                                .Enabled = True
                            End With
                            With os.DropDownItems("mnuDefault")
                                .Text = gpsRM.GetString("psDEFAULT_MNU", Culture)
                                .ToolTipText = gpsRM.GetString("psDEFAULT_MNU_TT", Culture)
                                .Enabled = True
                            End With
                            With os.DropDownItems("mnuUser")
                                .Text = gpsRM.GetString("psUSER_MNU", Culture)
                                .ToolTipText = gpsRM.GetString("psUSER_MNU_TT", Culture)
                                .Enabled = True
                            End With
                            With os.DropDownItems("mnuSaveUser")
                                .Text = gpsRM.GetString("psSAVE_USER_MNU", Culture)
                                .ToolTipText = gpsRM.GetString("psSAVE_USER_MNU_TT", Culture)
                                .Enabled = True
                            End With
                            With os.DropDownItems("mnuAlarmMaskUtility")
                                .Text = gpsRM.GetString("psALARM_MASK_MNU", Culture)
                                .ToolTipText = gpsRM.GetString("psALARM_MASK_MNU_TT", Culture)
                                .Enabled = True
                            End With
                    End Select
                Next

                .ResumeLayout()

            End With

            'Common Items
            With mLanguage.gcsRM
                Dim sCap As String = gpsRM.GetString("psMAIN_SCREEN_CAP", Culture)
                Dim sVer As String = String.Empty

                msAll = .GetString("csALL", Culture).ToUpper

                sVer = CType(System.Diagnostics.FileVersionInfo.GetVersionInfo( _
                             System.Reflection.Assembly.GetExecutingAssembly.Location).FileMajorPart, String)
                sVer = sVer & "." & Format(System.Diagnostics.FileVersionInfo.GetVersionInfo( _
                            System.Reflection.Assembly.GetExecutingAssembly.Location).FileMinorPart, "00")
                sVer = sVer & "." & Format(System.Diagnostics.FileVersionInfo.GetVersionInfo( _
                            System.Reflection.Assembly.GetExecutingAssembly.Location).FileBuildPart, "00")
                sVer = sVer & "." & Format(System.Diagnostics.FileVersionInfo.GetVersionInfo( _
                            System.Reflection.Assembly.GetExecutingAssembly.Location).FilePrivatePart, "00")
                'add version number
                Me.Text = sCap & "  " & .GetString("csVERSION", Culture) & "  " & sVer
            End With

            'Project Items   
            With mLanguage.gpsRM
                dgvAlarms.SuspendLayout()
                dgvAlarms.Columns("AlarmNumber").HeaderText = .GetString("psALARM_COL_CAP", Culture)
                dgvAlarms.Columns("Device").HeaderText = .GetString("psDEVICE_COL_CAP", Culture)
                dgvAlarms.Columns("Description").HeaderText = .GetString("psDESC_COL_CAP", Culture)
                dgvAlarms.Columns("Severity").HeaderText = .GetString("psSEVERITY_COL_CAP", Culture)
                dgvAlarms.Columns("CauseMnemonic").HeaderText = .GetString("psCAUSE_COL_CAP", Culture)
                dgvAlarms.Columns("StartSerial").HeaderText = .GetString("psSTART_COL_CAP", Culture)
                dgvAlarms.Columns("Zone").HeaderText = .GetString("psZONE_COL_CAP", Culture)
                dgvAlarms.Columns("ProdID").HeaderText = .GetString("psPROD_ID_COL_CAP", Culture)
                dgvAlarms.Columns("JobID").HeaderText = .GetString("psJOB_ID_COL_CAP", Culture)
                dgvAlarms.Columns("Style").HeaderText = .GetString("psSTYLE_COL_CAP", Culture)
                dgvAlarms.Columns("Color").HeaderText = .GetString("psCOLOR_COL_CAP", Culture)
                dgvAlarms.Columns("Valve").HeaderText = .GetString("psVALVE_COL_CAP", Culture)
                dgvAlarms.Columns("JobName").HeaderText = .GetString("psJOBNAME_COL_CAP", Culture)
                dgvAlarms.Columns("Process").HeaderText = .GetString("psPROCESS_COL_CAP", Culture)
                dgvAlarms.Columns("Node").HeaderText = .GetString("psNODE_COL_CAP", Culture)
                dgvAlarms.Columns("Status_col").HeaderText = .GetString("psSTATUS_COL_CAP", Culture)
                dgvAlarms.ResumeLayout()

                lblNoAlarms.Text = .GetString("psNO_ALARMS", Culture)

                msUpdating = .GetString("psUPDATING", Culture)
                msAutoRefreshOff = .GetString("psAUTO_REFRESH_OFF", Culture)
                msHelpFormTitle = .GetString("psHELP_FORM_CAP", Culture)

                mnuCauseColView.Text = .GetString("psCAUSE_COL_CAP", Culture)
                mnuZoneColView.Text = .GetString("psZONE_COL_CAP", Culture)
                mnuProdIDColView.Text = .GetString("psPROD_ID_COL_CAP", Culture)
                mnuJobIDColView.Text = .GetString("psJOB_ID_COL_CAP", Culture)
                mnuStyleColView.Text = .GetString("psSTYLE_COL_CAP", Culture)
                mnuColorColView.Text = .GetString("psCOLOR_COL_CAP", Culture)
                mnuValveColView.Text = .GetString("psVALVE_COL_CAP", Culture)
                mnuJobNameColView.Text = .GetString("psJOBNAME_COL_CAP", Culture)
                mnuProcessColView.Text = .GetString("psPROCESS_COL_CAP", Culture)
                mnuNodeColView.Text = .GetString("psNODE_COL_CAP", Culture)

                'HGB For SA
                Dim colZones As clsZones = New clsZones(String.Empty)
                If colZones.StandAlone Then 'hide the stuff we don't use in SA
                    mnuOptions.DropDownItems.Remove(mnuZoneColView)
                    mnuOptions.DropDownItems.Remove(mnuProdIDColView)
                    mnuOptions.DropDownItems.Remove(mnuJobIDColView)
                    mnuOptions.DropDownItems.Remove(mnuStyleColView)
                    mnuOptions.DropDownItems.Remove(mnuColorColView)
                    mnuOptions.DropDownItems.Remove(mnuValveColView)
                    mnuOptions.DropDownItems.Remove(mnuJobNameColView)
                    mnuOptions.DropDownItems.Remove(mnuProcessColView)
                    mnuOptions.DropDownItems.Remove(mnuNodeColView)
                End If
                'NRU 160902 Need a zone number for internal alarms because 1 is not always valid
                mnMinimumZoneNumber = colZones.CurrentZoneNumber
            End With

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subInitFormText", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub subInitializeForm()
        '********************************************************************************************
        'Description: Called on form load
        '
        'Parameters: none
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Dim bSuccess As Boolean = True

        Try
            'Use current language text for screen labels
            mLanguage.DisplayCultureString = msCulture
            If mLanguage.GetResourceManagers(msBASE_ASSEMBLY_COMMON, msBASE_ASSEMBLY_LOCAL, msROBOT_ASSEMBLY_LOCAL) Then
                Call subInitFormText()
            End If
            gAlarmsRM = New ResourceManager(msPLC_ALARM_ASSEMBLY_LOCAL, [Assembly].GetExecutingAssembly())

            'Create the Zones Colection
            mcolZones = New clsZones(String.Empty)

            'modular sql class for alarm logging 5/9/08
            mSQLDb = New clsSQLAccess
            mSQLDb.DBFileName = gsALARM_LOG_DBNAME
            mSQLDb.Zone = mcolZones.ActiveZone
            mSQLDb.DBTableName = gsALARM_DS_TABLENAME

            'Configure AlarmMan
            Call subConfigAlarmMan(mcolZones.DatabasePath)
            'Create the ActiveAlarms dataset
            dsActiveAlarms.ReadXmlSchema(mcolZones.DatabasePath & "XML\ActiveAlarmData.xsd")
            'Create the Displayed Alarms dataset
            dsDisplayedAlarms.ReadXmlSchema(mcolZones.DatabasePath & "XML\ActiveAlarmData.xsd")
            'Create the structure that will hold information about alarms that will be masked (not logged)
            Call subInitAlarms(mcolZones.DatabasePath)
            'dsLastPoll is used to determine if the ActiveAlarms datatable has changed
            dsLastPoll = dsActiveAlarms.Copy
            'connect the active alarm grid to the datatable
            dgvAlarms.DataSource = dsDisplayedAlarms
            dgvAlarms.DataMember = "ActiveAlarms"

            Call mPWCommon.GetDefaultFilePath(msHelpPath, eDir.Help, String.Empty, String.Empty)


            Call subInitAlarmCellColors()
            Call subConfigureGrid()
            Call subConfigureFilters()
            If GetViewSettings("User") Then
                mnuUser.CheckState = CheckState.Checked
                mnuDefault.CheckState = CheckState.Unchecked
            Else
                mnuUser.CheckState = CheckState.Unchecked
                mnuDefault.CheckState = CheckState.Checked
            End If

            'Initialize HTML print class
            mPrintHtml = New clsPrintHtml(msSCREEN_NAME, True, 30) 'RJO 11/23/11

            '********New program-to-program communication object******************************************
            oIPC = New Paintworks_IPC.clsInterProcessComm() '(gs_COM_ID_ALARM_MAN, , , True) 'RJO 03/08/12
            '********************************************************************************************


            'Initialize the array that keeps track of which column (if any) is sorted and in what direction
            ReDim mColsSortDir(dgvAlarms.ColumnCount - 1)
            Dim nCol As Integer = 0
            For nCol = 0 To dgvAlarms.ColumnCount - 1
                mColsSortDir(nCol) = SortOrder.None
            Next 'nCol

            Call subNoAlarms(True)

            mnuRemoveSort.Enabled = False
            tmrNewAlarm.Enabled = True

            'NRU 161006 Changed hardcoded zone 1's to mnMinimumZoneNumber
            Call subPostInternalAlarm("001", "GUI", "MESSAGE", mnMinimumZoneNumber, "Active")

            Dim bMultiZone As Boolean = (mcolZones.Count > 1)
            'Create the Controllers collection and set up the Robot Neighborhood if necessary
            If mbEnableRobotAlarms Then
                Dim sMsg As String = gpsRM.GetString("psCONFIG_ROB_ALARMS_MSG", DisplayCulture)

                'Call mWorksComm.SendFRWMMessage("poststatusmsg," & sMsg & ",0,0,0,0", "PW4_Main")
                Dim sMessage(1) As String
                sMessage(0) = "poststatusmsg"
                sMessage(1) = sMsg
                oIPC.WriteControlMsg(gs_COM_ID_PW_MAIN, sMessage)
                mcolControllers = New clsControllers(mcolZones, bMultiZone)
                'get Paint alarms equipment assignmnet information
                Call subBuildEquipAssignArray("PNT1", mPNT1EquipAssign)
                Call subBuildEquipAssignArray("PNT2", mPNT2EquipAssign)
            End If

            'Monitor alarms from PLC
            If mbEnablePLCAlarms Then
                Dim sMsg As String = gpsRM.GetString("psCONFIG_PLC_ALARMS_MSG", DisplayCulture)

                'Call mWorksComm.SendFRWMMessage("poststatusmsg," & sMsg & ",0,0,0,0", "PW4_Main")
                Dim sMessage(1) As String
                sMessage(0) = "poststatusmsg"
                sMessage(1) = sMsg
                oIPC.WriteControlMsg(gs_COM_ID_PW_MAIN, sMessage)
                mcolControllers = New clsControllers(mcolZones, bMultiZone)
                mcolPLCAlarmZones = New clsPLCAlarmZones(mcolZones, bMultiZone)

            End If


            '    10/06/10   MSW     support some ASCII Data
            Dim oStyles As New clsSysStyles(mcolZones.ActiveZone)
            gbAsciiStyle = oStyles.UseAscii
            gnAsciiStyleNumChar = oStyles.PlantAsciiMaxLength

            Dim sValves() As String = Nothing
            Dim oColors As XMLNodeList = Nothing
            Dim bColorsByStyle As Boolean
            Dim bUse2K As Boolean
            Dim bUseTricoat As Boolean
            Dim bTwoCoat As Boolean
            GetSystemColorInfoFromDB( mcolZones.ActiveZone, oColors, _
                            sValves, gbAsciiColor, bColorsByStyle, bUse2K, bUseTricoat, gnAsciiColorNumChar, bTwoCoat)


            Call subSetUpStatusStrip()

            'NRU 161006 Changed hardcoded zone 1's to mnMinimumZoneNumber
            Call subPostInternalAlarm("001", "GUI", "MESSAGE", mnMinimumZoneNumber, "Reset")

            Progress = 50
            System.Threading.Thread.Sleep(100)

            mbInitialized = True
            Progress = 90

            If mbEnableRobotAlarms Then
                'Fill in a slow spot on startup
                Dim sMsg As String = gpsRM.GetString("psCONN_ROBOTS_MSG", DisplayCulture)
                Dim sMessage(1) As String
                sMessage(0) = "poststatusmsg"
                sMessage(1) = sMsg
                oIPC.WriteControlMsg(gs_COM_ID_PW_MAIN, sMessage)
                mcolControllers.RefreshConnectionStatus()
            End If
            If mbEnablePLCAlarms Then
                'Fill in a slow spot on startup
                Dim sMsg As String = gpsRM.GetString("psCONN_PLC_MSG", DisplayCulture)
                Dim sMessage(1) As String
                sMessage(0) = "poststatusmsg"
                sMessage(1) = sMsg
                oIPC.WriteControlMsg(gs_COM_ID_PW_MAIN, sMessage)
                Call mcolPLCAlarmZones.MonitorAlarms()
            End If

        Catch ex As Exception
            Dim sErrMsg As String = gpsRM.GetString("psLOAD_ERROR", DisplayCulture)

            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subInitializeForm", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
            bSuccess = False
            'mWorksComm.SendFRWMMessage("poststatusmsg," & sErrMsg & ",0,0,0,0", "PW4_Main")
            Dim sMessage(1) As String
            sMessage(0) = "poststatusmsg"
            sMessage(1) = sErrMsg
            oIPC.WriteControlMsg(gs_COM_ID_PW_MAIN, sMessage)

        Finally
            Progress = 0
            'mWorksComm.SendFRWMMessage("alarmmanload," & bSuccess.ToString & ",0,0,0,0", "PW4_Main")
            Dim sMessage(1) As String
            sMessage(0) = "alarmmanload"
            sMessage(1) = bSuccess.ToString
            oIPC.WriteControlMsg(gs_COM_ID_PW_MAIN, sMessage)
        End Try

    End Sub

    Private Sub subNoAlarms(ByVal Show As Boolean)
        '********************************************************************************************
        'Description:  If Show = True, show the "No Active Alarms" banner. Otherwise, hide it.
        '
        'Parameters: Show (True/False)
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Try

            With lblNoAlarms
                .Left = dgvAlarms.Left
                .Width = dgvAlarms.Width
                .Top = dgvAlarms.Top
                .Height = dgvAlarms.ColumnHeadersHeight + 2 'Fudge so Header tooltip won't pop up
                .Visible = Show
            End With

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subNoAlarms", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Friend Sub subPostInternalAlarm(ByVal AlarmNumber As String, ByVal Device As String, _
                                    ByVal Severity As String, ByVal Zone As Integer, _
                                    ByVal Status As String)
        '********************************************************************************************
        'Description:  AlarmMan has recognized a condition that must be shown in the Active Alarm
        '              grid and subsequently logged.
        '
        'Parameters: AlarmNumber, Device, Severity, Zone, Status
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Try

            Dim oAlarm As udtAlarm
            Dim oIntAlarm As udtInternalAlarm

            With oIntAlarm
                .AlarmNumber = msPW_FACILITY_NAME & "-" & AlarmNumber
                .Description = gpsRM.GetString("psALARM_INT" & AlarmNumber, DisplayCulture)
                .Severity = Severity
                .Zone = Zone
                .Category = msPW_FACILITY_NAME
                .Facility = mnPW_FACILITY_CODE
                .Status = Status
            End With

            With oAlarm
                .Alarm = oIntAlarm
                .Device = Device
                .TimeStamp = DateTime.Now
                .Type = eDeviceType.GUI
            End With

            mcolActiveAlarms.Add(oAlarm)
            Control.CheckForIllegalCrossThreadCalls = False
            lblPLCAlarms.Text = mcolActiveAlarms.Count.ToString
            Control.CheckForIllegalCrossThreadCalls = True
        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subPostInternalAlarm", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub subRefreshGrid()
        '********************************************************************************************
        'Description:  Fill the Active Alarm grid with the current active alarm records
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Try

            Call subSuspendAutoUpdate(True)
            Call subUpdateActiveAlarms()

            If Not mbAutoAck Then
                mbManualAck = True
                Call subDeleteActiveAlarmRows(dsActiveAlarms.Tables("ActiveAlarms"))
            End If

            Call subSuspendAutoUpdate(False)

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subRefreshGrid", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Overloads Sub subRefreshStatus(ByVal Text As String, ByVal Visible As Boolean)
        '********************************************************************************************
        'Description: Controls the Refresh status label (lblUpdate) 
        '
        'Parameters: Text to display, Visibility (True = show, False = hide)
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Try

            With lblUpdate
                .Text = Text
                .BackColor = Drawing.Color.LemonChiffon
                .Visible = Visible
            End With

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subRefreshStatus(2)", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Overloads Sub subRefreshStatus(ByVal Text As String, ByVal Visible As Boolean, ByVal BackColor As Color)
        '********************************************************************************************
        'Description: Controls the Refresh status label (lblUpdate). Allows caller to set backcolor. 
        '
        'Parameters: Text to display, Visibility (True = show, False = hide)
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Try

            With lblUpdate
                .Text = Text
                .BackColor = BackColor
                .Visible = Visible
                If Not .Visible Then .BackColor = Drawing.Color.LemonChiffon 'Return to default color
            End With

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subRefreshStatus(3)", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try


    End Sub

    Private Sub subResetActiveAlarms(ByVal Device As String, ByVal AlarmNumber As String, _
                                     ByVal Description As String, Optional ByVal Type As Integer = -1)
        '********************************************************************************************
        'Description:  Remove Alarms that have been reset from theActive Alarms table and log them in
        '              the Alarm Log database.
        '
        'Parameters: Device, AlarmNumber, Description
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '02/24/09   AM      Make a difference by Type if PLC it is translated.
        '********************************************************************************************
        Dim bBogusRecord As Boolean = False
        Dim bReset As Boolean = False
        Dim nResetAlarms As Integer = 0

        Try
            If (Device = "*") And (AlarmNumber = "*") Then
                mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subResetActiveAlarms", _
                                       "Event: AlarmMan shutdown - Resetting and logging all alarms.")
            End If

            'Loop through each row in the ActiveAlarms table and mark rows to be logged and deleted 
            'by setting the Status column to "Reset", based on vsDevice and vsAlarm. 
            For Each drActiveAlarm As DataRow In dsActiveAlarms.Tables("ActiveAlarms").Rows

                bReset = False

                'We wouldn't want to imply anything here...
                bBogusRecord = False
                Dim sAlarmNumber As String = TryCast(drActiveAlarm.Item("AlarmNumber"), String)
                If IsNothing(sAlarmNumber) Then
                    sAlarmNumber = String.Empty
                    bBogusRecord = True
                End If
                Dim sDescription As String = TryCast(drActiveAlarm.Item("Description"), String)
                If IsNothing(sDescription) Then
                    sDescription = String.Empty
                    bBogusRecord = True
                End If
                Dim sDevice As String = TryCast(drActiveAlarm.Item("Device"), String)
                If IsNothing(sDevice) Then
                    sDevice = String.Empty
                    bBogusRecord = True
                End If
                Dim nFacility As Integer = 0
                If IsNothing(drActiveAlarm.Item("Facility")) Then
                    bBogusRecord = True
                Else
                    nFacility = DirectCast(drActiveAlarm.Item("Facility"), Integer)
                End If
                If bBogusRecord Then
                    mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subResetActiveAlarms", _
                                           "Error: Invalid record found in ActiveAlarms " & _
                                           "table: Alarm [" & sAlarmNumber & "], Device [" & sDevice & "], Desc [" & _
                                           sDescription & "], Facility [" & nFacility.ToString & "]")
                End If

                If sDevice = Device Then
                    If AlarmNumber = "*" Then
                        'Mark ALL Active Robot Controller Alarms for this device as Reset
                        If nFacility >= 0 Then bReset = True
                    Else

                        'If the Alarm Mnemonic AND the description match (parameters may be different),
                        'mark this alarm as Reset
                        '02/24/09 AM. Make a difference by Type if PLC it is translated.
                        Select Case Type
                            Case eDeviceType.PLC
                                If (sAlarmNumber = AlarmNumber) Then bReset = True
                            Case Else
                                If (sAlarmNumber = AlarmNumber) And (sDescription = Description) Then bReset = True
                        End Select

                    End If 'AlarmNumber = "*"
                End If 'sDevice) = vsDevice


                'If AlarmMan has been shut down, clear the grid and log everything.
                If (Device = "*") And (AlarmNumber = "*") Then bReset = True

                If bReset Then
                    Dim sStatus As String = drActiveAlarm.Item("Status").ToString

                    If sStatus = "Active" Then
                        drActiveAlarm("Status") = "Reset @ " & DateTime.Now.ToString
                        drActiveAlarm("EndSerial") = DateTime.Now
                        drActiveAlarm.AcceptChanges()
                        nResetAlarms = nResetAlarms + 1
                    End If
                End If 'bReset
            Next 'row

            If nResetAlarms > 0 Then
                'WriteResetAlarmsToDB will check "Status" field to determine which alarms to log
                'in the Alarm Log database. subWriteResetAlarmsToDB doesn't modify the datatable
                'so we'll pass in a copy just to make sure it won't throw an exception if the
                'ActiveAlarms table changes.
                Dim dtActiveAlarms As DataTable = dsActiveAlarms.Tables("ActiveAlarms").Copy

                'MSW 11/12/09 - don't write to access anymore
                'Call subWriteResetAlarmsToDB(dtActiveAlarms)
                '5/12/09 write to sql database
                'HGB SA paintshop computer changes
                If (mcolZones.StandAlone And mcolZones.PaintShopComputer) Then
                Else
                    Call subWriteResetAlarmsToSQLDB(dtActiveAlarms)
                End If

                'Delete the alarm rows that have been marked as Reset.
                Call subDeleteActiveAlarmRows(dsActiveAlarms.Tables("ActiveAlarms"))
            End If 'nResetAlarms > 0

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subResetActiveAlarms", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub subResetWarnings(ByVal Device As String)
        '********************************************************************************************
        'Description:  Remove Robot Warning alarms that have been reset by the PLC from theActive 
        '              Alarms table and log them in the Alarm Log database.
        '
        'Parameters: Device
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Dim bBogusRecord As Boolean = False
        Dim bReset As Boolean = False
        Dim nResetAlarms As Integer = 0

        Try

            'Loop through each row in the ActiveAlarms table and mark rows to be logged and deleted 
            'by setting the Status column to "Reset", based on vsDevice and vsAlarm. 
            For Each drActiveAlarm As DataRow In dsActiveAlarms.Tables("ActiveAlarms").Rows

                bReset = False

                'We wouldn't want to imply anything here...
                bBogusRecord = False

                Dim sDevice As String = TryCast(drActiveAlarm.Item("Device"), String)
                If IsNothing(sDevice) Then
                    sDevice = String.Empty
                    bBogusRecord = True
                End If
                Dim nFacility As Integer = 0
                If IsNothing(drActiveAlarm.Item("Facility")) Then
                    bBogusRecord = True
                Else
                    nFacility = DirectCast(drActiveAlarm.Item("Facility"), Integer)
                End If
                Dim sSeverity As String = TryCast(drActiveAlarm.Item("Severity"), String)
                If IsNothing(sSeverity) Then
                    sSeverity = String.Empty
                    bBogusRecord = True
                End If
                If bBogusRecord Then
                    mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subResetActiveAlarms", _
                                           "Error: Invalid record found in ActiveAlarms " & _
                                           "table: Device [" & sDevice & "], Facility [" & nFacility.ToString & _
                                           "] , Severity [" & sSeverity & "]")
                End If

                If sDevice = Device Then
                    'Mark ALL Active Robot Controller Alarms with severity of WARNING or less for this device as Reset
                    If nFacility >= 0 Then
                        bReset = Not CausesDowntime(sSeverity)
                    End If

                End If 'sDevice) = vsDevice

                If bReset Then
                    Dim sStatus As String = drActiveAlarm.Item("Status").ToString

                    If sStatus = "Active" Then
                        drActiveAlarm("Status") = "Reset @ " & DateTime.Now.ToString
                        drActiveAlarm("EndSerial") = DateTime.Now
                        drActiveAlarm.AcceptChanges()
                        nResetAlarms = nResetAlarms + 1
                    End If
                End If 'bReset
            Next 'row

            If nResetAlarms > 0 Then
                'WriteResetAlarmsToDB will check "Status" field to determine which alarms to log
                'in the Alarm Log database. subWriteResetAlarmsToDB doesn't modify the datatable
                'so we'll pass in a copy just to make sure it won't throw an exception if the
                'ActiveAlarms table changes.
                Dim dtActiveAlarms As DataTable = dsActiveAlarms.Tables("ActiveAlarms").Copy
                'MSW 11/12/09 - don't write to access anymore
                'Call subWriteResetAlarmsToDB(dtActiveAlarms)
                'Delete the alarm rows that have been marked as Reset.
                'HGB SA Paintshop computeer - don't log
                If (mcolZones.StandAlone And mcolZones.PaintShopComputer) Then
                Else
                    Call subWriteResetAlarmsToSQLDB(dtActiveAlarms)
                End If
                Call subDeleteActiveAlarmRows(dsActiveAlarms.Tables("ActiveAlarms"))
            End If 'nResetAlarms > 0

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subResetWarnings", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub subSetUpStatusStrip()
        '********************************************************************************************
        'Description:  Size and locate the StatusBar - this routine needs work - have to locate the
        '              controls properly - now set up with designer - they dont cooperate
        '
        'Parameters: none
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************    
        Dim nWidth As Integer = 0
        Dim nHeight As Integer = 25
        Dim oPad As New Padding(2, 1, 2, 1)
        Dim nRunWidth As Integer = 0

        Try
            nWidth = Me.Width - 10

            With stsStatus
                .SuspendLayout()

                .AllowDrop = False
                .AllowItemReorder = False
                .AllowMerge = False
                .AutoSize = False
                .Height = nHeight
                .ShowItemToolTips = True
                .SizingGrip = True
                .Stretch = True
                .CanOverflow = True
                .RenderMode = ToolStripRenderMode.ManagerRenderMode

                'status label
                With lblStatus
                    .AutoSize = False
                    .Width = CType((nWidth * 0.475), Integer)
                    .Text = String.Empty
                    .Height = nHeight - 2
                    .Padding = oPad
                    nRunWidth = .Width
                End With

                'progress bar
                With tspProgress
                    .AutoSize = False
                    .Width = CType((nWidth * 0.175), Integer)
                    .Height = nHeight - 1
                    .Padding = oPad
                    nRunWidth += .Width
                    mSSSize.ProgBarVisibleSize = .Width
                    mSSSize.ProgBarInvisSize = 0
                    .Visible = False
                End With

                With lblSpacer
                    .AutoSize = False
                    .Width = 10
                    .Text = String.Empty
                    .Height = nHeight - 2
                    .Padding = oPad
                    nRunWidth += .Width
                    mSSSize.SpaceLabelVisbleSize = .Width + mSSSize.ProgBarVisibleSize
                    mSSSize.SpaceLabelInvisSize = .Width
                End With

                'function button

                nRunWidth += btnFunction.Width
                btnFunction.AutoSize = True
                btnFunction.Padding = oPad
                btnFunction.Image = DirectCast(gcsRM.GetObject("imgLock"), Image)
                For Each o As ToolStripItem In btnFunction.DropDownItems
                    Select Case o.Name
                        Case "mnuLogin"
                            o.Text = gcsRM.GetString("csLOGIN")
                            ' o.Visible = False
                            o.Enabled = False
                        Case "mnuLogOut"
                            o.Text = gcsRM.GetString("csLOGOUT")
                            o.Enabled = False
                            ' o.Visible = False
                        Case "mnuRemote"
                            o.Text = gcsRM.GetString("csREMOTE_ZONE")
                            o.Enabled = False
                            o.Visible = False
                        Case "mnuLocal"
                            o.Text = gcsRM.GetString("csLOCAL_ZONE")
                            o.Enabled = False
                            o.Visible = False
                    End Select
                Next 'o
                btnFunction.Visible = False

                'get rid of old robots
                For nItem As Integer = stsStatus.Items.Count - 1 To 0 Step -1
                    Dim o As ToolStripItem = stsStatus.Items(nItem)
                    Select Case o.Name
                        Case "btnFunction", "tspProgress", "lblStatus", "lblSpacer"

                        Case Else
                            stsStatus.Items.Remove(o)
                    End Select
                Next 'nItem

                If mcolControllers Is Nothing Then
                    .ResumeLayout()
                    Exit Sub
                End If

                If mcolControllers.Count = 0 Then
                    .ResumeLayout()
                    Exit Sub
                End If

                If mcolZones.MISComputer Then
                    .ResumeLayout()
                    Exit Sub
                End If
                nRunWidth += 20 ' fudge space if you get 2 rows of robots bump this up

                Dim nRestofbar As Integer = nWidth - nRunWidth
                'start assuming square pics
                Dim nRobotSpace As Integer = mcolControllers.Count * nHeight
                Dim nBotWidth As Integer
                If nRobotSpace >= nRestofbar Then
                    nBotWidth = CInt(nRestofbar / mcolControllers.Count)
                Else
                    ' add a pad label
                    Dim s As New ToolStripStatusLabel
                    With s
                        .AutoSize = False
                        .Width = nRestofbar - nRobotSpace
                        .Name = "Spacer"
                        .Visible = True
                        .DisplayStyle = ToolStripItemDisplayStyle.None
                        .Height = nHeight
                    End With
                    stsStatus.Items.Add(s)
                    nBotWidth = nHeight
                End If

                'add new robots
                Dim oBot As Bitmap = CType(gcsRM.GetObject("imgSBRGrey"), Bitmap)
                Dim oCol As Color = oBot.GetPixel(0, 0)

                For nitem As Integer = 1 To mcolControllers.Count
                    Dim s As New ToolStripStatusLabel
                    With s
                        .AutoSize = False
                        .Width = nBotWidth
                        .Name = "lbl" & mcolControllers(nitem - 1).Name
                        .Visible = True
                        .DisplayStyle = ToolStripItemDisplayStyle.ImageAndText
                        .ImageAlign = ContentAlignment.MiddleCenter
                        .Image = oBot
                        .Height = nHeight
                        .ImageTransparentColor = oCol
                        .AutoToolTip = True

                    End With
                    stsStatus.Items.Add(s)
                Next 'nitem

                .ResumeLayout()

                .Update()

            End With 'stsStatus

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subSetUpStatusStrip", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub subShowFilterList(ByVal Column As Integer)
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Dim DR As DataRow
        Dim sDataField As String = String.Empty
        Dim sData As String = String.Empty

        Try

            Call subSuspendAutoUpdate(True)

            lstFilter.Items.Clear()
            lstFilter.Sorted = True

            'make a sorted list of all the unique values in this column
            For nRow As Integer = 0 To (dsActiveAlarms.Tables("ActiveAlarms").Rows.Count - 1)
                DR = dsActiveAlarms.Tables("ActiveAlarms").Rows(nRow)
                sDataField = dgvAlarms.Columns(Column).DataPropertyName
                sData = TryCast(DR(sDataField), String)

                If Not IsNothing(sData) Then
                    If sData <> String.Empty Then
                        If lstFilter.Items.Contains(sData) = False Then
                            lstFilter.Items.Add(sData)
                        End If
                    End If
                End If 'Not IsNothing(sData)

            Next 'nRow
            DR = Nothing

            'load the combo box
            cboFilter.Tag = dgvAlarms.Columns(Column).Name
            cboFilter.Items.Clear()
            cboFilter.Items.Add(msAll)

            For nItem As Integer = 0 To lstFilter.Items.Count - 1
                cboFilter.Items.Add(lstFilter.Items(nItem))
            Next 'nRow

            cboFilter.Width = dgvAlarms.Columns(Column).Width + 25
            cboFilter.Left = dgvAlarms.Left
            If Column > 0 Then
                For nCol As Integer = 0 To Column - 1
                    If dgvAlarms.Columns(nCol).Visible Then
                        cboFilter.Left = cboFilter.Left + dgvAlarms.Columns(nCol).HeaderCell.Size.Width
                    End If
                Next 'nCol
            End If 'Column > 0

            Dim thisfilter As udtFilter = CType(mcolFilters(cboFilter.Tag), udtFilter)
            cboFilter.Visible = True
            cboFilter.Text = thisfilter.Filter

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subShowFilterList", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub subSuspendAutoUpdate(ByVal bSuspend As Boolean)
        '********************************************************************************************
        'Description:  
        '
        'Parameters: bSuspend True = Suspend Auto Update, False = Enable Auto Update
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        If bSuspend Then
            mbAutoUpdate = tmrUpdateGrid.Enabled
            tmrUpdateGrid.Enabled = False
        Else
            tmrUpdateGrid.Enabled = mbAutoUpdate
        End If

    End Sub

    Private Sub subUpdateActiveAlarms()
        '********************************************************************************************
        'Description:  Refresh the Active Alarm Grid with current alarm records.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Dim theCursor As Cursor = Me.Cursor

        Try

            If Not IsNothing(dsActiveAlarms) Then

                dgvAlarms.SuspendLayout()

                If dgvAlarms.Visible Then
                    'remember where we were before the refresh
                    Dim selectedCellAddress As Point = dgvAlarms.CurrentCellAddress
                    Dim nHScroll As Integer = dgvAlarms.HorizontalScrollingOffset

                    'Make sure the selectedCellAddress is valid before proceeding
                    If (selectedCellAddress.X < 0) Or (selectedCellAddress.X < 0) Then
                        selectedCellAddress.X = 0
                        selectedCellAddress.Y = 0
                    End If

                    'Refresh the Datatset
                    dsDisplayedAlarms = dsActiveAlarms.Copy
                    dgvAlarms.DataSource = dsDisplayedAlarms

                    'Let the PW Main form know if the severity level of active alarms has changed
                    Call subCheckSeverity()

                    'Apply any filters
                    Call subFilterGrid()

                    'Apply any pre-existing sorts
                    For nCol As Integer = 0 To dgvAlarms.ColumnCount - 1
                        If mColsSortDir(nCol) <> SortOrder.None Then
                            If mColsSortDir(nCol) = SortOrder.Ascending Then
                                dgvAlarms.Sort(dgvAlarms.Columns(nCol), System.ComponentModel.ListSortDirection.Ascending)
                            Else
                                dgvAlarms.Sort(dgvAlarms.Columns(nCol), System.ComponentModel.ListSortDirection.Descending)
                            End If
                        End If
                        dgvAlarms.Columns(nCol).HeaderCell.SortGlyphDirection = mColsSortDir(nCol)
                    Next

                    If dgvAlarms.RowCount > 0 Then
                        'The Cell at 0,0 will be selected automatically after the refresh so de-select it before we start
                        dgvAlarms.Item(0, 0).Selected = False

                        'If the row that was selected before the update doesn't exist anymore, select the last row
                        If selectedCellAddress.Y >= dgvAlarms.Rows.Count Then
                            selectedCellAddress.Y = dgvAlarms.Rows.Count - 1
                        End If

                        'Put the grid back where it was before the update
                        dgvAlarms.CurrentCell = dgvAlarms.Item(selectedCellAddress.X, selectedCellAddress.Y)
                        dgvAlarms.CurrentCell.Selected = True
                        dgvAlarms.HorizontalScrollingOffset = nHScroll
                    End If 'dgvAlarms.RowCount > 0

                End If 'dgvAlarms.Visible

            End If 'Not IsNothing(dsActiveAlarms)

            dgvAlarms.ResumeLayout()

            Me.Cursor = theCursor

        Catch ex As Exception
            Me.Cursor = theCursor
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subUpdateActiveAlarms", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    'MSW 11/12/09 - don't write to access anymore
    'Private Sub subWriteResetAlarmsToDB(ByRef AlarmTable As DataTable)
    '    '********************************************************************************************
    '    'Description:  
    '    '
    '    'Parameters: None
    '    'Returns:    None
    '    '
    '    'Modification history:
    '    '
    '    ' Date      By      Reason
    '    '******************************************************************************************** 
    '    Dim CN As OleDbConnection = Nothing
    '    Dim DA As New OleDbDataAdapter
    '    Dim DR As DataRow
    '    Dim sInsertCmd As String = String.Empty

    '    Try
    '        CN = New OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" & _
    '                                 mcolZones.DatabasePath & gsALARMLOG_DBNAME)
    '        CN.Open()
    '        sInsertCmd = "INSERT INTO " & gsALARM_DS_TABLENAME & "(" & gsALARM_NUM & _
    '                     "," & gsALARM_DEVICE & "," & gsALARM_DESC & "," & gsALARM_SEV & _
    '                     "," & gsALARM_CAUSE & "," & gsALARM_START & "," & gsALARM_END & _
    '                     "," & gsALARM_ZONE & "," & gsALARM_PRODID & "," & gsALARM_JOBID & _
    '                     "," & gsALARM_STYLE & "," & gsALARM_COLOR & "," & gsALARM_VALVE & _
    '                     "," & gsALARM_JOBNAME & "," & gsALARM_PROCESS & "," & gsALARM_NODE & _
    '                     "," & gsALARM_CATEGORY & "," & gsALARM_DOWNTIME & ") " & _
    '                     "VALUES (@alarmnum,@device,@desc,@severity,@cause,@start,@end," & _
    '                     "@zone,@prodid,@jobid,@style,@color,@valve,@jobname,@process," & _
    '                     "@node,@category,@downtime)"

    '        DA.InsertCommand = New OleDb.OleDbCommand(sInsertCmd, CN)

    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@alarmnum", OleDb.OleDbType.Char, 8, gsALARM_NUM))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@device", OleDb.OleDbType.Char, 50, gsALARM_DEVICE))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@desc", OleDb.OleDbType.Char, 40, gsALARM_DESC))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@severity", OleDb.OleDbType.Char, 12, gsALARM_SEV))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@cause", OleDb.OleDbType.Char, 8, gsALARM_CAUSE))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@start", OleDb.OleDbType.DBTimeStamp, 25, gsALARM_START))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@end", OleDb.OleDbType.DBTimeStamp, 25, gsALARM_END))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@zone", OleDb.OleDbType.Integer, 0, gsALARM_ZONE))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@prodid", OleDb.OleDbType.Char, 18, gsALARM_PRODID))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@jobid", OleDb.OleDbType.Char, 5, gsALARM_JOBID))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@style", OleDb.OleDbType.Char, 30, gsALARM_STYLE))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@color", OleDb.OleDbType.Char, 30, gsALARM_COLOR))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@valve", OleDb.OleDbType.Char, 30, gsALARM_VALVE))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@jobname", OleDb.OleDbType.Char, 8, gsALARM_JOBNAME))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@process", OleDb.OleDbType.Char, 8, gsALARM_PROCESS))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@node", OleDb.OleDbType.Integer, 0, gsALARM_NODE))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@category", OleDb.OleDbType.Char, 4, gsALARM_CATEGORY))
    '        DA.InsertCommand.Parameters.Add(New OleDb.OleDbParameter("@downtime", OleDb.OleDbType.Boolean, 0, gsALARM_DOWNTIME))

    '        For Each DR In AlarmTable.Rows
    '            Dim sStatus As String = DirectCast(DR.Item("Status"), String)

    '            If (Strings.Left(sStatus, 5) = "Reset") And (Strings.Right(sStatus, 1) <> ".") Then
    '                DA.InsertCommand.Parameters("@alarmnum").Value = DR.ItemArray(eAlarmColumns.AlarmNumber)
    '                DA.InsertCommand.Parameters("@device").Value = DR.ItemArray(eAlarmColumns.Device)
    '                DA.InsertCommand.Parameters("@desc").Value = DR.ItemArray(eAlarmColumns.Description)
    '                DA.InsertCommand.Parameters("@severity").Value = DR.ItemArray(eAlarmColumns.Severity)
    '                DA.InsertCommand.Parameters("@cause").Value = DR.ItemArray(eAlarmColumns.CauseMnemonic)
    '                DA.InsertCommand.Parameters("@start").Value = CType(DR.ItemArray(eAlarmColumns.StartSerial), String)
    '                DA.InsertCommand.Parameters("@end").Value = CType(DR.ItemArray(eAlarmColumns.EndSerial), String)
    '                DA.InsertCommand.Parameters("@zone").Value = CType(DR.ItemArray(eAlarmColumns.Zone), Integer)
    '                DA.InsertCommand.Parameters("@prodid").Value = DR.ItemArray(eAlarmColumns.ProdID)
    '                DA.InsertCommand.Parameters("@jobid").Value = DR.ItemArray(eAlarmColumns.JobID)
    '                DA.InsertCommand.Parameters("@style").Value = DR.ItemArray(eAlarmColumns.StyleNumber)
    '                DA.InsertCommand.Parameters("@color").Value = DR.ItemArray(eAlarmColumns.ColorNumber)
    '                DA.InsertCommand.Parameters("@valve").Value = DR.ItemArray(eAlarmColumns.ValveNumber)
    '                DA.InsertCommand.Parameters("@jobname").Value = DR.ItemArray(eAlarmColumns.JobName)
    '                DA.InsertCommand.Parameters("@process").Value = DR.ItemArray(eAlarmColumns.Process)
    '                DA.InsertCommand.Parameters("@node").Value = CType(DR.ItemArray(eAlarmColumns.Node), Integer)
    '                DA.InsertCommand.Parameters("@category").Value = DR.ItemArray(eAlarmColumns.Category)
    '                DA.InsertCommand.Parameters("@downtime").Value = CType(DR.ItemArray(eAlarmColumns.DowntimeFlag), Boolean)
    '                DA.InsertCommand.ExecuteNonQuery()
    '            End If '(Strings.Left(sStatus, 5) = "Reset") And (Strings.Right(sStatus, 1) <> ".")
    '        Next 'DR

    '    Catch ex As Exception
    '        mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: subWriteResetAlarmsToDB", _
    '                               "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
    '    Finally
    '        CN.Close()
    '    End Try

    'End Sub
    Private Sub subWriteResetAlarmsToSQLDB(ByRef AlarmTable As DataTable)
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        ' 04/16/10  RJO     Added code to check (and restore if necessary) SQL Server connection.
        '******************************************************************************************** 
        Dim DR As DataRow

        Try
            Dim cmd As SqlClient.SqlCommand = mSQLDb.GetStoredProcedureCommand("AddAlarmRecord")

            If cmd Is Nothing Then
                Throw New System.Exception("Failed to return stored procedure command")
            End If

            'add parameters to command object
            With cmd.Parameters

                .Add(New SqlClient.SqlParameter("@Alarm_Number", SqlDbType.NChar))
                .Add(New SqlClient.SqlParameter("@Device", SqlDbType.NVarChar))
                .Add(New SqlClient.SqlParameter("@Description", SqlDbType.NVarChar))
                .Add(New SqlClient.SqlParameter("@Severity", SqlDbType.NVarChar))
                .Add(New SqlClient.SqlParameter("@CauseMnemonic", SqlDbType.NChar))
                .Add(New SqlClient.SqlParameter("@Start_Time", SqlDbType.DateTime))
                .Add(New SqlClient.SqlParameter("@End_Time", SqlDbType.DateTime))
                .Add(New SqlClient.SqlParameter("@Zone", SqlDbType.NVarChar))
                .Add(New SqlClient.SqlParameter("@VIN_Number", SqlDbType.NVarChar))
                .Add(New SqlClient.SqlParameter("@Carrier_Number", SqlDbType.NVarChar))
                .Add(New SqlClient.SqlParameter("@Plant_Style", SqlDbType.NVarChar))
                .Add(New SqlClient.SqlParameter("@Plant_Color", SqlDbType.NVarChar))
                .Add(New SqlClient.SqlParameter("@Valve_Number", SqlDbType.NVarChar))
                .Add(New SqlClient.SqlParameter("@Job_Name", SqlDbType.NVarChar))
                .Add(New SqlClient.SqlParameter("@Process_Name", SqlDbType.NVarChar))
                .Add(New SqlClient.SqlParameter("@Node", SqlDbType.Int))
                .Add(New SqlClient.SqlParameter("@Category", SqlDbType.NChar))
                .Add(New SqlClient.SqlParameter("@Downtime_Flag", SqlDbType.Bit))
                .Add(New SqlClient.SqlParameter("@Sequence_Number", SqlDbType.Int))


                'set parameters and log to db

                For Each DR In AlarmTable.Rows
                    Dim sStatus As String = DirectCast(DR.Item("Status"), String)

                    If (Strings.Left(sStatus, 5) = "Reset") And (Strings.Right(sStatus, 1) <> ".") Then


                        .Item("@Alarm_Number").Value = DR.ItemArray(eAlarmColumns.AlarmNumber)
                        .Item("@Device").Value = DR.ItemArray(eAlarmColumns.Device)
                        .Item("@Description").Value = DR.ItemArray(eAlarmColumns.Description)
                        .Item("@Severity").Value = DR.ItemArray(eAlarmColumns.Severity)
                        .Item("@CauseMnemonic").Value = DR.ItemArray(eAlarmColumns.CauseMnemonic)
                        .Item("@Start_Time").Value = DR.ItemArray(eAlarmColumns.StartSerial)
                        .Item("@End_Time").Value = DR.ItemArray(eAlarmColumns.EndSerial)
                        .Item("@Zone").Value = mcolZones.Item(CType(DR.ItemArray(eAlarmColumns.Zone), Integer)).Name '" " RJO 08/21/09
                        .Item("@VIN_Number").Value = DR.ItemArray(eAlarmColumns.ProdID)
                        .Item("@Carrier_Number").Value = DR.ItemArray(eAlarmColumns.JobID)
                        .Item("@Plant_Style").Value = DR.ItemArray(eAlarmColumns.StyleNumber)
                        .Item("@Plant_Color").Value = DR.ItemArray(eAlarmColumns.ColorNumber)
                        .Item("@Valve_Number").Value = DR.ItemArray(eAlarmColumns.ValveNumber)
                        .Item("@Job_Name").Value = DR.ItemArray(eAlarmColumns.JobName)
                        .Item("@Process_Name").Value = DR.ItemArray(eAlarmColumns.Process)
                        .Item("@Node").Value = CType(DR.ItemArray(eAlarmColumns.Node), Integer)
                        .Item("@Category").Value = DR.ItemArray(eAlarmColumns.Category)
                        .Item("@Downtime_Flag").Value = CType(DR.ItemArray(eAlarmColumns.DowntimeFlag), Boolean)
                        .Item("@Sequence_Number").Value = 0

                        'ship it
                        'Check the connection to SQL Server first 'RJO 04/16/10
                        If mSQLDb.ConnectionOpen Then
                            cmd.ExecuteNonQuery()
                        Else
                            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & _
                                            " Routine: subWriteResetAlarmsToSQLDB", _
                                            "Error: The SQL DB connection could not be opened.")
                        End If
                    End If '(Strings.Left(sStatus, 5) = "Reset") And (Strings.Right(sStatus, 1) <> ".")
                Next 'DR

            End With

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & _
                                    " Routine: subWriteResetAlarmsToSQLDB", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)

        End Try



    End Sub

#End Region

#Region " Events"

    Private Sub btnClose_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnClose.Click
        '********************************************************************************************
        'Description:  The Close button was clicked.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try
            Call subDestroyHelpForm()
            'Call subRefreshGrid() 'RJO 12/05/11
            Me.WindowState = FormWindowState.Minimized

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: btnClose_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub btnPrint_ButtonClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnPrint.ButtonClick
        '********************************************************************************************
        'Description:  The Print button was clicked. Print the Active Alarms.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Call bPrintAlarms(True)

    End Sub

    Private Sub btnRefresh_ButtonClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnRefresh.ButtonClick
        '********************************************************************************************
        'Description:  The Refresh button was clicked
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Call subRefreshGrid()

    End Sub

    Private Sub btnView_ButtonClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnView.ButtonClick
        '********************************************************************************************
        'Description:  The View button was clicked. There's no default so do nothing.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        'tlsMain.Items("btnView").PerformClick()

    End Sub

    Private Sub cboFilter_SelectionChangeCommitted(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboFilter.SelectionChangeCommitted
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 
        Dim Culture As System.Globalization.CultureInfo = DisplayCulture

        Try

            If mcolFilters.Contains(CType(cboFilter.Tag, String)) Then
                Dim thisFilter As udtFilter = CType(mcolFilters.Item(cboFilter.Tag), udtFilter)

                mcolFilters.Remove(CType(cboFilter.Tag, String))
                cboFilter.Visible = False
                thisFilter.Filter = cboFilter.Text
                mcolFilters.Add(thisFilter, CType(cboFilter.Tag, String))

                If thisFilter.Filter = msAll Then
                    dgvAlarms.Columns(CType(cboFilter.Tag, String)).HeaderCell.Style.BackColor = Me.BackColor
                    If FilterEnabled() Then
                        mnuRemoveFilters.Enabled = True
                        StatusMessage = gpsRM.GetString("psFILTER_ACTIVE", Culture)
                    Else
                        mnuRemoveFilters.Enabled = True
                        StatusMessage = String.Empty
                    End If
                Else
                    dgvAlarms.Columns(CType(cboFilter.Tag, String)).HeaderCell.Style.BackColor = Drawing.Color.Orange
                    mnuRemoveFilters.Enabled = True
                    StatusMessage = gpsRM.GetString("psFILTER_ACTIVE", Culture)
                End If 'thisFilter.Filter = msAll

                Call subUpdateActiveAlarms()

            End If

            Call subSuspendAutoUpdate(False)

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: cboFilter_SelectionChangeCommitted", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub dgvAlarms_CellContentClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgvAlarms.CellContentClick
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Try
            'If the Cause/Remedy form is already showing, dispose of it
            Call subDestroyHelpForm()

            'Show the Cause/Remedy form when the user clicks an alarm mnemonic link.
            If (e.ColumnIndex = dgvAlarms.Columns("AlarmNumber").Index Or _
                e.ColumnIndex = dgvAlarms.Columns("CauseMnemonic").Index) And _
                (e.RowIndex >= 0) AndAlso Not dgvAlarms.Rows(e.RowIndex).IsNewRow Then

                Dim sAlarmCode As String = String.Empty
                Dim sDevice As String = TryCast(dgvAlarms.Rows(e.RowIndex).Cells("Device").Value, String)
                Dim nFacility As Integer = DirectCast(dgvAlarms.Rows(e.RowIndex).Cells("Facility").Value, Integer)

                If e.ColumnIndex = dgvAlarms.Columns("AlarmNumber").Index Then
                    sAlarmCode = TryCast(dgvAlarms.Rows(e.RowIndex).Cells("AlarmNumber").Value, String)
                Else
                    sAlarmCode = TryCast(dgvAlarms.Rows(e.RowIndex).Cells("CauseMnemonic").Value, String)
                End If

                If Not (sAlarmCode Is Nothing) Then

                    Dim sHelpFileName As String = HelpFileName(sAlarmCode)
                    Dim hrefAddress As String = String.Empty
                    Dim sBookMark As String = sHelpFileName & Strings.Right(sAlarmCode, 4)

                    If nFacility < 0 Then
                        'This is a PLC generated alarm. Cause/Remedy is on worksserver.
                        'hrefAddress = "http://worksserver/WorksASPDBService/" & sHelpFileName & ".HTM#" & sAlarmCode
                        'No, actually Cause/Remedy text for devices other than a Robot is in the Help\AlarmMan folder.
                        'msHelpPath As String = My.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\Software\FANUC\PAINTworks", "HelpPath", Nothing).ToString

                        hrefAddress = msHelpPath & "AlarmMan/" & sHelpFileName & ".HTM#" & sBookMark
                    Else
                        'This is a Robot Controller generated alarm. Cause/Remedy is on the robot controller.
                        'Make a link that looks like this http://robot_r1/FRH/DIAGEG/pnt1.stm#PNT1-009
                        '# is the book mark that is the same as the alarm code.
                        Dim oController As clsController = mcolControllers.Item(sDevice)
                        Dim sFanucName As String = oController.FanucName

                        hrefAddress = "http://" & sFanucName & "/FRH/DIAGEG/" & sHelpFileName & ".STM#" & sBookMark
                    End If

                    '[Wilmington Customization] We can't get help/cause/remedy from the robot so we'll 
                    'get it all from files on the GUI that are made to resemble robot files.
                    'hrefAddress = sHelpPath & "AlarmMan/" & sHelpFileName & ".HTM#" & sHelpFileName & Strings.Right(sAlarmCode, 4)

                    mfrmCauseRemedy = New frmHelp
                    With mfrmCauseRemedy
                        .Show()
                        .Text = msHelpFormTitle
                        .Target = hrefAddress
                    End With

                End If

            End If

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: dgvAlarms_CellContentClick", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub dgvAlarms_CellFormatting(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellFormattingEventArgs) Handles dgvAlarms.CellFormatting
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try

            If Not IsNothing(e.Value) Then

                If e.ColumnIndex = dgvAlarms.Columns("Severity").Index Then
                    Dim sSeverity As String = TryCast(dgvAlarms.Rows(e.RowIndex).Cells("Severity").Value, String)

                    If Not (sSeverity Is Nothing) Then
                        Dim nSeverityLevel As eAlarmSeverityLevel = PWSeverity(sSeverity)
                        'Set the row ForeColor and BackColor based on the severity of the alarm
                        With dgvAlarms.Rows(e.RowIndex)
                            .DefaultCellStyle.ForeColor = mAlarmCellColors(nSeverityLevel).ForeColor
                            .DefaultCellStyle.BackColor = mAlarmCellColors(nSeverityLevel).BackColor
                            .DefaultCellStyle.SelectionForeColor = mAlarmCellColors(nSeverityLevel).BackColor
                            .DefaultCellStyle.SelectionBackColor = mAlarmCellColors(nSeverityLevel).ForeColor
                        End With
                    End If

                End If 'e.ColumnIndex = dgvAlarms.Columns("Severity").Index

            End If 'Not IsNothing(e.Value)

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: dgvAlarms_CellFormatting", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub dgvAlarms_CellMouseEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgvAlarms.CellMouseEnter
        '********************************************************************************************
        'Description:  User moused over column header. Show hand mousepointer.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try
            If Not mbInitialized Then Exit Sub

            If e.RowIndex = -1 Then
                Dim sColName As String = dgvAlarms.Columns(e.ColumnIndex).Name
                Dim oFilter As udtFilter = DirectCast(mcolFilters.Item(sColName), udtFilter)

                dgvAlarms.Cursor = System.Windows.Forms.Cursors.Hand
                'Make sure we get the full hang time if we're coming from another column...
                tmrToolTip.Enabled = False

                'Show the applicable column header tooltip for this column...
                lblGridTT.Text = mLanguage.gpsRM.GetString("psSORT_TT", DisplayCulture)
                If oFilter.Enabled Then
                    lblGridTT.Text = lblGridTT.Text & mLanguage.gpsRM.GetString("psFILTER_TT", DisplayCulture)
                End If

                'In the proper location...
                lblGridTT.Left = dgvAlarms.Left
                If e.ColumnIndex > 0 Then
                    For nCol As Integer = 0 To e.ColumnIndex - 1
                        If dgvAlarms.Columns(nCol).Visible Then
                            lblGridTT.Left += dgvAlarms.Columns(nCol).HeaderCell.Size.Width
                        End If
                    Next 'nCol
                    If lblGridTT.Right > dgvAlarms.Right Then
                        lblGridTT.Left = lblGridTT.Left - (lblGridTT.Right - dgvAlarms.Right)
                    End If
                End If 'e.ColumnIndex > 0

                lblGridTT.Top = dgvAlarms.Top - lblGridTT.Height - 2
                lblGridTT.Visible = True
                'And don't let it stay there too long...
                tmrToolTip.Enabled = True
                'Burma Shave
            End If

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: dgvAlarms_CellMouseEnter", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub dgvAlarms_CellMouseLeave(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles dgvAlarms.CellMouseLeave
        '********************************************************************************************
        'Description:  User moused off of column header. Show default mousepointer.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Try

            If Not mbInitialized Then Exit Sub

            If e.RowIndex = -1 Then
                dgvAlarms.Cursor = System.Windows.Forms.Cursors.Default
                'Hide the Column Header Tool Tip
                lblGridTT.Visible = False
            End If

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: dgvAlarms_CellMouseLeave", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub dgvAlarms_ColumnHeaderMouseClick(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellMouseEventArgs) Handles dgvAlarms.ColumnHeaderMouseClick
        '********************************************************************************************
        'Description: Sorts or filters the contents of a column when appropriate.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try
            Dim nClickedCol As Integer = e.ColumnIndex

            'Hide the Column Hearder tooltip in case it is visible
            lblGridTT.Visible = False

            If e.Button = Windows.Forms.MouseButtons.Left Then 'Sort the contents of the grid based on values in this column
                'Don't bother if the column isn't sortable
                If dgvAlarms.Columns(nClickedCol).SortMode <> DataGridViewColumnSortMode.NotSortable Then
                    Dim sortDir As SortOrder = dgvAlarms.Columns(nClickedCol).HeaderCell.SortGlyphDirection
                    'Only one column can be sorted at a time. Change the glyph on all the other columns to
                    'sort direction none (not sorted).
                    For nCol As Integer = 0 To dgvAlarms.ColumnCount - 1
                        If nCol <> nClickedCol Then
                            dgvAlarms.Columns(nCol).HeaderCell.SortGlyphDirection = SortOrder.None
                            mColsSortDir(nCol) = SortOrder.None
                        End If
                    Next 'nCol

                    'Change the sort order based on what it was before and then update the glyph.
                    Select Case sortDir
                        Case SortOrder.None, SortOrder.Descending
                            dgvAlarms.Sort(dgvAlarms.Columns(nClickedCol), System.ComponentModel.ListSortDirection.Ascending)
                            dgvAlarms.Columns(nClickedCol).HeaderCell.SortGlyphDirection = SortOrder.Ascending
                            mColsSortDir(nClickedCol) = SortOrder.Ascending
                        Case SortOrder.Ascending
                            dgvAlarms.Sort(dgvAlarms.Columns(nClickedCol), System.ComponentModel.ListSortDirection.Descending)
                            dgvAlarms.Columns(nClickedCol).HeaderCell.SortGlyphDirection = SortOrder.Descending
                            mColsSortDir(nClickedCol) = SortOrder.Descending
                    End Select

                    mnuRemoveSort.Enabled = True

                End If 'dgvAlarms.Columns(nClickedCol).SortMode <> DataGridViewColumnSortMode.NotSortable

            Else 'Filter the contents of the grid based on the value in this column
                Dim thisFilter As udtFilter = CType(mcolFilters(dgvAlarms.Columns(nClickedCol).Name), udtFilter)
                'don't bother if this column can't be filtered or there are no rows in the grid
                If thisFilter.Enabled And (dsActiveAlarms.Tables("ActiveAlarms").Rows.Count > 0) Then
                    Call subShowFilterList(nClickedCol)
                End If
                thisFilter = Nothing
            End If 'e.Button = Windows.Forms.MouseButtons.Left

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: dgvAlarms_ColumnHeaderMouseClick", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Protected Overrides Sub Finalize()
        '********************************************************************************************
        'Description: Make sure the connection to SQL Server is closed when this thing shuts down.
        '
        'Parameters: none
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Try
            mSQLDb.Close()
        Catch ex As Exception

        End Try

        MyBase.Finalize()

    End Sub

    Private Sub frmMain_FormClosing(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles Me.FormClosing
        '********************************************************************************************
        'Description: dont close from the x
        '
        'Parameters: none
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Select Case e.CloseReason
            Case CloseReason.UserClosing
                e.Cancel = True
        End Select
    End Sub

    Private Sub frmMain_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles Me.KeyDown
        '********************************************************************************************
        'Description: Hide this form if the user presses the Escape key.
        '
        'Parameters: none
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
		'    09/30/13   MSW     Save screenshots as jpegs
        '********************************************************************************************

        'Trap Function Key presses
        If (Not e.Alt) And (Not e.Control) And (Not e.Shift) Then
            Select Case e.KeyCode
                Case Keys.F1
                    'Help Screen request
                    'Dim lReturn As Long

                    'lReturn = Shell("C:\paint\vbapps\pw3help.exe [2.8]Alarms\Alarms.htm", AppWinStyle.MaximizedFocus)
                    subLaunchHelp(gs_HELP_ALARMS, oIPC)
                Case Keys.F2
                    'Screen Dump request
                    Dim oSC As New ScreenShot.ScreenCapture
                    Dim sDumpPath As String = String.Empty

                    mPWCommon.GetDefaultFilePath(sDumpPath, eDir.ScreenDumps, String.Empty, String.Empty)
                    oSC.CaptureWindowToFile(Me.Handle, sDumpPath & msSCREEN_DUMP_NAME, Imaging.ImageFormat.Jpeg)

                Case Keys.Escape
                    Call subDestroyHelpForm()
                    Me.WindowState = FormWindowState.Minimized
                Case Keys.F7
                    lblRobotAlarms.Visible = Not (lblRobotAlarms.Visible)
                    lblPLCAlarms.Visible = Not (lblPLCAlarms.Visible)
                Case Else

            End Select
        End If

    End Sub

    Private Sub frmMain_Layout(ByVal sender As Object, ByVal e As System.Windows.Forms.LayoutEventArgs) Handles Me.Layout
        '********************************************************************************************
        'Description: Runs after class constructor (new)
        '
        'Parameters: none
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        ' 11/03/08  RJO     Added support for (passed in) startup culture (language).
        '********************************************************************************************
        'Starting sizes
        'form: 1034, 784
        'Grid:984, 594
        Dim sz As Size = Me.Size
        sz.Width = sz.Width - 50
        sz.Height = sz.Height - 190
        If sz.Width < 100 Then
            sz.Width = 100
        End If
        If sz.Height < 100 Then
            sz.Height = 100
        End If
        dgvAlarms.Size = sz
    End Sub

    Private Sub frmMain_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        '********************************************************************************************
        'Description: Runs after class constructor (new)
        '
        'Parameters: none
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        ' 11/03/08  RJO     Added support for (passed in) startup culture (language).
        '********************************************************************************************

        Try
            Dim sCultureArg As String = "/culture="

            'Record any anomolies in the Application Event Log

            'Trace.Listeners.Clear()
            'Trace.Listeners.Add(AlarmManTraceListener)

            'If a culture string has been passed in, set the current culture (display language)
            'rjo 11/03/08
            For Each s As String In My.Application.CommandLineArgs
                If s.ToLower.StartsWith(sCultureArg) Then
                    'gsDefaultCulture is the culture to use for non-Robot alarm strings. These alarms 
                    'will always be logged in this (the default) language, regardless of on-the-fly 
                    'form text language change requeste.
                    gsDefaultCulture = s.Remove(0, sCultureArg.Length)
                    'The culture to use for form text
                    Culture = gsDefaultCulture
                End If
            Next

            Call subInitializeForm()
            tmrUpdateGrid.Enabled = True
            'Go into stealth mode
            Me.WindowState = FormWindowState.Minimized

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: frmMain_Load", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mcolControllers_AlarmNotification(ByVal Alarm As Object, ByVal Name As String) Handles mcolControllers.AlarmNotification
        '********************************************************************************************
        'Description: A controller just posted a new alarm. Grab it, stuff it in a collection and 
        '             get outta Dodge before this thing gets called again.
        '
        'Parameters: Alarm - The new Alarm, Name - Name of the robot that reported it
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        ' 11/20/13  BTK     Removed hyper robot code.  Added code for re-entering routine.
        '********************************************************************************************
        'ASD 12/14/2016 added code to break out of the loop if it ever gets locked in for some reason
        Dim loopcount As Integer

        loopcount = 0

        'Do While mbBusy
        Do While (mbBusy = True) And (loopcount < 1000)
            '5 second timeout, and then just do it..
            loopcount = loopcount + 1
            Threading.Thread.Sleep(5)
        Loop

        If mbBusy Then
            Dim oRobotAlarm As FRRobot.FRCAlarm = DirectCast(Alarm, FRRobot.FRCAlarm)
            Dim sTmp As String = Name & ":" & oRobotAlarm.ErrorFacility & "-" & oRobotAlarm.ErrorMnemonic & "-" & oRobotAlarm.ErrorMessage
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mcolControllers_AlarmNotification", _
                                   "Event re-entered: " & sTmp)
            'Exit Sub '05/05/08 RJO
        End If
        mbBusy = True

        Try
            Dim oAlarm As udtAlarm

            With oAlarm
                .Alarm = Alarm
                .Device = Name
                .TimeStamp = DateTime.Now
                .Type = eDeviceType.Robot
            End With

            'Debug stuff
            Dim nCount As Integer = mcolActiveRobotAlarms.Count

            If nCount > 100 Then
                If Not mbBigBufferMemory Then
                    mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mcolControllers_AlarmNotification", _
                                          "Event: There are more than 100 unprocessed robot alarms in the collection.")
                    mbBigBufferMemory = True
                End If
            Else
                If mbBigBufferMemory And (nCount < 90) Then
                    mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mcolControllers_AlarmNotification", _
                                          "Event: There are now less than 90 unprocessed robot alarms in the collection.")
                    mbBigBufferMemory = False
                End If
            End If
            'MSW 1/28/14 backoff the complicated fix
            ''When the robot gets misbehaving, this outruns the code that empties the collection.  Check 
            ''for duplicates here
            'Dim oRobotAlarm As FRRobot.FRCAlarm = DirectCast(Alarm, FRRobot.FRCAlarm)
            'Dim bSkip As Boolean = False
            'Do While mbModifying
            '    Application.DoEvents()
            'Loop
            'mdReading = True
            'For Each oAlarmItem As udtAlarm In mcolActiveRobotAlarms
            '    Dim oRobotAlarmItem As FRRobot.FRCAlarm = DirectCast(oAlarmItem.Alarm, FRRobot.FRCAlarm)
            '    If (oRobotAlarm.ErrorMnemonic = oRobotAlarmItem.ErrorMnemonic) AndAlso _
            '        (oRobotAlarm.ErrorMessage = oRobotAlarmItem.ErrorMessage) AndAlso _
            '        (oRobotAlarm.ErrorFacility = oRobotAlarmItem.ErrorFacility) Then
            '        bSkip = True
            '    End If
            'Next
            'mdReading = False
            'If bSkip = False Then
            '    mcolActiveRobotAlarms.Add(oAlarm)
            'End If
            'Control.CheckForIllegalCrossThreadCalls = False
            'lblRobotAlarms.Text = mcolActiveRobotAlarms.Count.ToString
            'Control.CheckForIllegalCrossThreadCalls = True


            If Not mbAddAlarmBusy Then
                'Another shot at the runaway PT alarms
                If mcolActiveRobotAlarms.Count > 10 Then
                    Dim oAlarmItem As udtAlarm = DirectCast(mcolActiveRobotAlarms(mcolActiveRobotAlarms.Count - 1), udtAlarm)
                    Dim oRobotAlarmItem As FRRobot.FRCAlarm = DirectCast(oAlarmItem.Alarm, FRRobot.FRCAlarm)
                    Dim oRobotAlarm As FRRobot.FRCAlarm = DirectCast(Alarm, FRRobot.FRCAlarm)
                    If (oRobotAlarm.ErrorMnemonic = oRobotAlarmItem.ErrorMnemonic) AndAlso _
                        (oRobotAlarm.ErrorMessage = oRobotAlarmItem.ErrorMessage) AndAlso _
                                (oRobotAlarm.ErrorFacility = oRobotAlarmItem.ErrorFacility) Then
                        'Duplicate alarm, skip it.
                        Debug.Print("Duplicate alarm, skip " & oRobotAlarm.ErrorMnemonic & "   " & oRobotAlarm.ErrorMessage)
                    Else
                        mbAddAlarmBusy = True
                        mcolActiveRobotAlarms.Add(oAlarm)
                        mbAddAlarmBusy = False
                    End If
                Else
                    mbAddAlarmBusy = True
                    mcolActiveRobotAlarms.Add(oAlarm)
                    mbAddAlarmBusy = False
                End If
            Else
                'So, we might miss one once in a blue moon. It's better than the collection throwing an 
                'unhandled Exception!
                mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mcolControllers_AlarmNotification", _
                                       "Error: subAddNewAlarmToCollection was re-entered! Exiting sub.")
            End If


        Catch ex As Exception
            Dim oRobotAlarm As FRRobot.FRCAlarm = DirectCast(Alarm, FRRobot.FRCAlarm)
            Dim sTmp As String = Name & ":" & oRobotAlarm.ErrorFacility & "-" & oRobotAlarm.ErrorMnemonic & "-" & oRobotAlarm.ErrorMessage
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mcolControllers_AlarmNotification:" & sTmp, _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        Finally
            mbBusy = False
            mbAddAlarmBusy = False
        End Try

    End Sub

    Private Sub mcolControllers_ConnectionStatusChange(ByVal Controller As clsController) Handles mcolControllers.ConnectionStatusChange
        '********************************************************************************************
        'Description: The conncetion status of a robot just changed so do the right thing.
        '
        'Parameters: Controller - The controller object that reported the connection status change
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        If Not mbInitialized Then Exit Sub
        If mcolZones.MISComputer Then Exit Sub

        Try
            'NRU 161006 Changed hardcoded zone 1's to controller's zone number
            Call subPostInternalAlarm("007", Controller.Name, "WARN", Controller.Zone.ZoneNumber, "Reset") 'Heartbeat Lost

            Select Case Controller.RCMConnectStatus

                Case ConnStat.frRNConnected

                    'mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mcolControllers_ConnectionStatusChange", _
                    '   "Event: " & Controller.Name & " connection status changed to frRNConnected.")

                    'We're hooked up. Reset this alarm if it is active
                    'NRU 161006 Changed hardcoded zone 1's to controller's zone number
                    Call subPostInternalAlarm("004", Controller.Name, "WARN", Controller.Zone.ZoneNumber, "Reset") 'Connection Unavailable
                    'If the robot is connected and not in a controlled start, start alarm monitoring
                    If Controller.InControlledStart Then
                        'NRU 161006 Changed hardcoded zone 1's to controller's zone number
                        Call subPostInternalAlarm("005", Controller.Name, "WARN", Controller.Zone.ZoneNumber, "Active") 'In Controlled Start
                        mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mcolControllers_ConnectionStatusChange", _
                                               "Event: " & Controller.Name & " is in a Controlled Start.")
                    Else
                        If Controller.LeavingControlledStart Then

                            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mcolControllers_ConnectionStatusChange", _
                                "Event: " & Controller.Name & " connection status is frRNConnected and Leaving Controlled Start.")

                            'reconnect
                            Controller.subConnect()
                        Else
                            'NRU 161006 Changed hardcoded zone 1's to controller's zone number
                            Call subPostInternalAlarm("002", Controller.Name, "MESSAGE", Controller.Zone.ZoneNumber, "Active") 'Connection Established

                            'mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mcolControllers_ConnectionStatusChange", _
                            '    "Event: " & Controller.Name & " connection status is frRNConnected. MonitorAlarms = " & Controller.MonitorAlarms.ToString & ".")

                            If Not Controller.MonitorAlarms Then Controller.MonitorAlarms = True

                            If Controller.MonitorAlarms Then
                                mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mcolControllers_ConnectionStatusChange", _
                                                       "Event: " & Controller.Name & " Alarm Monitor started.")
                            End If
                            'NRU 161006 Changed hardcoded zone 1's to controller's zone number
                            Call subPostInternalAlarm("002", Controller.Name, "MESSAGE", Controller.Zone.ZoneNumber, "Reset") 'Connection Established
                        End If
                    End If

                Case ConnStat.frRNHeartbeatLost
                    mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mcolControllers_ConnectionStatusChange", _
                         "Event: " & Controller.Name & " connection status changed to frRNHeartbeatLost.")

                    'NRU 161006 Changed hardcoded zone 1's to controller's zone number
                    Call subPostInternalAlarm("007", Controller.Name, "WARN", Controller.Zone.ZoneNumber, "Active") 'Heartbeat Lost

                    'If ethernet connection is lost, we'll get heartbeat lost.
                    ' So, if we were monitoring alarms, stop and clear when we get heartbeat lost.
                    ' We'll start monitoring again when we get "connected" state.
                    If Controller.MonitorAlarms Then
                        Controller.MonitorAlarms = False
                        'Reset and log all of this controllers' active alarms
                        Call subControllerConnectionLost(Controller.Name)
                    End If

                Case ConnStat.frRNDisconnecting

                    mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mcolControllers_ConnectionStatusChange", _
                        "Event: " & Controller.Name & " connection status changed to frRNDisconnecting.")

                    'We lost the connection. Log this event and stop the alarm monitor.
                    'NRU 161006 Changed hardcoded zone 1's to controller's zone number
                    Call subPostInternalAlarm("003", Controller.Name, "WARN", Controller.Zone.ZoneNumber, "Active") 'Connection Lost
                    Call subPostInternalAlarm("005", Controller.Name, "WARN", Controller.Zone.ZoneNumber, "Reset") 'In Controlled Start
                    If Controller.MonitorAlarms Then Controller.MonitorAlarms = False
                    'Reset and log all of this controllers' active alarms
                    Call subControllerConnectionLost(Controller.Name)

                Case ConnStat.frRNConnecting

                    'mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mcolControllers_ConnectionStatusChange", _
                    '    "Event: " & Controller.Name & " connection status changed to frRNConnecting.")

                    'We're trying to connect. Log this event
                    'NRU 161006 Changed hardcoded zone 1's to controller's zone number
                    Call subPostInternalAlarm("003", Controller.Name, "WARN", Controller.Zone.ZoneNumber, "Reset") 'Connection Lost
                    Call subPostInternalAlarm("004", Controller.Name, "WARN", Controller.Zone.ZoneNumber, "Active") 'Connection Unavailable

                    ' If controller is rebooted, from pendant, we'll get "connecting", then after a minute 
                    ' or so, "connected". (We will not get heartbeat lost.)
                    ' So, if we were monitoring alarms, and we get "connecting", stop and clear.
                    ' We'll start monitoring again when we get "connected".
                    If Controller.MonitorAlarms Then
                        Controller.MonitorAlarms = False
                        'Reset and log all of this controllers' active alarms
                        Call subControllerConnectionLost(Controller.Name)
                    End If

                Case Else
                    'frRNAvailable, frRNUnavailable, and frRNUnknown don't do anything for us so we won't worry about
                    'them.

            End Select

            'Update robot status icons in Status Bar
            Control.CheckForIllegalCrossThreadCalls = False
            Call subDoStatusBar(Controller)
            Control.CheckForIllegalCrossThreadCalls = True

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mcolControllers_ConnectionStatusChange", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mcolPLCAlarmZones_AlarmNotification(ByVal Alarm As clsPLCAlarm) Handles mcolPLCAlarmZones.AlarmNotification
        '********************************************************************************************
        'Description: A PLC Device just posted a new alarm. Grab it, stuff it in a collection and 
        '             get outta Dodge before this thing gets called again.
        '
        'Parameters: Alarm - The new clsPLCAlarm
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Try
            Dim oAlarm As udtAlarm

            With oAlarm
                .Alarm = Alarm
                .Device = Alarm.Device
                .TimeStamp = DateTime.Now
                .Type = eDeviceType.PLC
            End With

            mcolActiveAlarms.Add(oAlarm)
            'Control.CheckForIllegalCrossThreadCalls = False
            'lblPLCAlarms.Text = mcolActiveAlarms.Count.ToString
            'Control.CheckForIllegalCrossThreadCalls = True


        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mcolPLCAlarmZones_AlarmNotification", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mnuAlarmMaskUtility_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuAlarmMaskUtility.Click
        '********************************************************************************************
        'Description: Show the Alarm Mask setup utility screen 
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        ' Date      By      Reason
        ' 09/19/11  RJO     Prior to modification, this routine assumed AlarmMask.exe was in the
        '                   C:\Paint\VBApps folder.
        ' 08/31/12  RJO     Pass in the path to MaskedAlarms.xml
        '******************************************************************************************** 
        Dim sPath As String = String.Empty
        Dim sXMLPath As String = String.Empty

        Call mPWCommon.GetDefaultFilePath(sPath, eDir.VBApps, String.Empty, String.Empty)
        Call mPWCommon.GetDefaultFilePath(sXMLPath, eDir.XML, String.Empty, String.Empty)

        Shell(sPath & "AlarmMask.exe /path=" & sXMLPath, AppWinStyle.NormalFocus)

    End Sub

    Private Sub mnuAutoAcknowledge_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuAutoAcknowledge.Click
        '********************************************************************************************
        'Description: The Auto Acknowledge setting has changed
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try

            If Not mbInitialized Then Exit Sub

            If mnuAutoAcknowledge.CheckState = CheckState.Checked Then
                mbAutoAck = True
                dgvAlarms.Columns("Status_col").Visible = False
                If Not IsNothing(dsActiveAlarms.Tables("ActiveAlarms")) Then
                    Call subDeleteActiveAlarmRows(dsActiveAlarms.Tables("ActiveAlarms"))
                End If
            Else
                mbAutoAck = False
                dgvAlarms.Columns("Status_col").Visible = True
            End If

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuAutoAcknowledge_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mnuAutoRefresh_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuAutoRefresh.Click
        '********************************************************************************************
        'Description:  The Auto Refresh setting has been changed.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try
            Select Case mnuAutoRefresh.CheckState
                Case CheckState.Checked
                    tmrUpdateGrid.Enabled = True
                    Call subRefreshStatus(String.Empty, False)
                Case Else
                    tmrUpdateGrid.Enabled = False
                    Call subRefreshStatus(msAutoRefreshOff, True, Drawing.Color.LightSalmon)
            End Select
        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuAutoRefresh_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mnuCauseColView_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuCauseColView.Click
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try

            With dgvAlarms.Columns("CauseMnemonic")
                Select Case mnuCauseColView.CheckState
                    Case CheckState.Checked
                        .Visible = True
                    Case Else
                        .Visible = False
                End Select
            End With

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuCauseColView_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mnuColorColView_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuColorColView.Click
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try

            With dgvAlarms.Columns("Color")
                Select Case mnuColorColView.CheckState
                    Case CheckState.Checked
                        .Visible = True
                    Case Else
                        .Visible = False
                End Select
            End With

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuColorColView_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mnuDefault_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuDefault.Click
        '********************************************************************************************
        'Description:  Set grid column visibility and Auto Acknowledge to the Default configuration.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try

            If GetViewSettings("Default") Then
                mnuUser.CheckState = CheckState.Unchecked
            Else
                mnuDefault.CheckState = CheckState.Unchecked
            End If

            If mbAutoAck Then
                If Not IsNothing(dsActiveAlarms.Tables("ActiveAlarms")) Then
                    Call subDeleteActiveAlarmRows(dsActiveAlarms.Tables("ActiveAlarms"))
                End If
            End If

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuDefault_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mnuJobIDColView_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuJobIDColView.Click
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Try

            With dgvAlarms.Columns("JobID")
                Select Case mnuJobIDColView.CheckState
                    Case CheckState.Checked
                        .Visible = True
                    Case Else
                        .Visible = False
                End Select
            End With

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuJobIDColView_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mnuJobNameColView_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuJobNameColView.Click
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Try

            With dgvAlarms.Columns("JobName")
                Select Case mnuJobNameColView.CheckState
                    Case CheckState.Checked
                        .Visible = True
                    Case Else
                        .Visible = False
                End Select
            End With

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuJobNameColView_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mnuNodeColView_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuNodeColView.Click
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************
        Try

            With dgvAlarms.Columns("Node")
                Select Case mnuNodeColView.CheckState
                    Case CheckState.Checked
                        .Visible = True
                    Case Else
                        .Visible = False
                End Select
            End With

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuNodeColView_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mnuPageSetup_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuPageSetup.Click
        '********************************************************************************************
        'Description:  Show page setup dialog 
        '
        'Parameters: none
        'Returns:    Print settings to use in printing
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        If bPrintAlarms(False) Then
            mPrintHtml.subShowPageSetup()
        End If

    End Sub

    Private Sub mnuPrint_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuPrint.Click
        '********************************************************************************************
        'Description:  Print was chosen from the Print button drop down menu. Print the Active Alarms.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Call bPrintAlarms(True)

    End Sub

    Private Sub mnuPrintFile_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuPrintFile.Click
        '********************************************************************************************
        'Description:  Save the Active Alarms table to a file
        '
        'Parameters:  
        'Returns:   
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        If bPrintAlarms(False) Then
            mPrintHtml.subSaveAs()
        End If

    End Sub

    Private Sub mnuPrintOptions_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuPrintOptions.Click
        '********************************************************************************************
        'Description:  Offer options for printout table setup.
        '
        'Parameters:  
        'Returns:   
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        mPrintHtml.subShowOptions()

    End Sub

    Private Sub mnuPrintPreview_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuPrintPreview.Click
        '********************************************************************************************
        'Description:  Show a print preview of the Active Alarms table.
        '
        'Parameters:  
        'Returns:   
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        If bPrintAlarms(False) Then
            mPrintHtml.subShowPrintPreview()
        End If

    End Sub

    Private Sub mnuProcessColView_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuProcessColView.Click
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try

            With dgvAlarms.Columns("Process")
                Select Case mnuProcessColView.CheckState
                    Case CheckState.Checked
                        .Visible = True
                    Case Else
                        .Visible = False
                End Select
            End With

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuProcessColView_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mnuProdIDColView_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuProdIDColView.Click
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Try
            With dgvAlarms.Columns("ProdID")
                Select Case mnuProdIDColView.CheckState
                    Case CheckState.Checked
                        .Visible = True
                    Case Else
                        .Visible = False
                End Select
            End With
        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuProdIDColView_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mnuRemoveFilters_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuRemoveFilters.Click
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try

            Call subSuspendAutoUpdate(True)

            Do While mcolFilters.Count > 0
                mcolFilters.Remove(1)
            Loop

            For nCol As Integer = 0 To dgvAlarms.ColumnCount - 1
                If dgvAlarms.Columns(nCol).Visible Then
                    dgvAlarms.Columns(nCol).HeaderCell.Style.BackColor = Me.BackColor
                End If
            Next 'nCol

            If StatusMessage = gpsRM.GetString("psFILTER_ACTIVE", DisplayCulture) Then
                StatusMessage = String.Empty
            End If

            Call subConfigureFilters()
            Call subUpdateActiveAlarms()
            Call subSuspendAutoUpdate(False)

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuRemoveFilters_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try


    End Sub

    Private Sub mnuRemoveSort_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuRemoveSort.Click
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try

            Call subSuspendAutoUpdate(True)

            For nCol As Integer = 0 To mColsSortDir.GetUpperBound(0)
                mColsSortDir(nCol) = SortOrder.None
            Next 'nCol

            Call subUpdateActiveAlarms()
            Call subSuspendAutoUpdate(False)
            mnuRemoveSort.Enabled = False

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuRemoveSort_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mnuSaveUser_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuSaveUser.Click
        '********************************************************************************************
        'Description:  Save the User grid column visibility configuration to AlarmManConfig.xml.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '********************************************************************************************

        Try
            Dim Culture As System.Globalization.CultureInfo = DisplayCulture
            Dim sCaption As String = gpsRM.GetString("psSAVE_USER_MNU", Culture)

            If SaveUserViewSettings() Then
                MessageBox.Show(gpsRM.GetString("psSAVE_USER_SUCCESS", Culture), sCaption, MessageBoxButtons.OK, MessageBoxIcon.Information)
            Else
                MessageBox.Show(gpsRM.GetString("psSAVE_USER_FAIL", Culture), sCaption, MessageBoxButtons.OK, MessageBoxIcon.Error)
            End If

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuSaveUser_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mnuStyleColView_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuStyleColView.Click
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try

            With dgvAlarms.Columns("Style")
                Select Case mnuStyleColView.CheckState
                    Case CheckState.Checked
                        .Visible = True
                    Case Else
                        .Visible = False
                End Select
            End With

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuStyleColView_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try


    End Sub

    Private Sub mnuUser_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuUser.Click
        '********************************************************************************************
        'Description:  Set grid column visibility and Auto Acknowledge to the User configuration.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try

            If GetViewSettings("User") Then
                mnuDefault.CheckState = CheckState.Unchecked
            Else
                mnuUser.CheckState = CheckState.Unchecked
            End If

            If mbAutoAck Then
                If Not IsNothing(dsActiveAlarms.Tables("ActiveAlarms")) Then
                    Call subDeleteActiveAlarmRows(dsActiveAlarms.Tables("ActiveAlarms"))
                End If
            End If

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuUser_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try


    End Sub

    Private Sub mnuValveColView_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuValveColView.Click
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try

            With dgvAlarms.Columns("Valve")
                Select Case mnuValveColView.CheckState
                    Case CheckState.Checked
                        .Visible = True
                    Case Else
                        .Visible = False
                End Select
            End With

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuValveColView_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub mnuZoneColView_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuZoneColView.Click
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try

            With dgvAlarms.Columns("Zone")
                Select Case mnuZoneColView.CheckState
                    Case CheckState.Checked
                        .Visible = True
                    Case Else
                        .Visible = False
                End Select
            End With

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: mnuZoneColView_Click", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub

    Private Sub tmrBlink_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles tmrBlink.Tick
        '********************************************************************************************
        'Description:  
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try

            Call subRefreshStatus(String.Empty, False)
            tmrBlink.Enabled = False

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: tmrBlink_Tick", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub
    Private Sub subProcessAlarmCollection(ByVal oCol As Collection(Of udtAlarm))
        '********************************************************************************************
        'Description: If a New alarm is present in the oCol collection, add it to the 
        '             ActiveAlarm Dataset.
        '
        'Parameters: none
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        ' 09/10/13  MSW     1st version, mostly copied from tmrNewAlarm.Tick
        ' 09/30/13  MSW     subProcessAlarmCollection - make sure we don't drop any mines for the next routine.
        ' 10/11/13  MSW     subProcessAlarmCollection - prevent Ctype errors on DBNulls
        ' 04/10/14  MSW     Another PaintTool alarm format
        '********************************************************************************************
        Try
            Do Until oCol.Count = 0

                Dim oAlarm As New udtAlarm
                'MSW 1/28/14 backoff the complicated fix
                'Do While mdReading
                '    Application.DoEvents()
                'Loop
                'mbModifying = True
                oAlarm = oCol.Item(0)
                oCol.Remove(oAlarm)
                'mbModifying = False

                Dim drNewAlarm As DataRow = dsActiveAlarms.Tables("ActiveAlarms").NewRow
                'Dim bDowntimeFlag As Boolean
                Dim bReset As Boolean
                Dim bDataOK As Boolean
                Dim sDeviceType As String = String.Empty
                'Dim nEquip As Integer 'RJO 01/25/12
                Dim nResult As Integer
                Dim nEquipmentAlarm As Integer

                'Get some common stuff out of the way
                With drNewAlarm
                    .Item("Device") = oAlarm.Device
                    .Item("StartSerial") = oAlarm.TimeStamp
                    'For now this will be the same as the start time. We'll change it when the alarm clears.
                    .Item("EndSerial") = oAlarm.TimeStamp
                    'MSW 10/11/13 - prevent Ctype errors on DBNulls
                    .Item("Node") = 0
                End With

                'oAlarm.Alarm will be different depending on the device type. Populate drNewAlarm with 
                'data from the object we just received.
                Select Case oAlarm.Type

                    Case eDeviceType.Robot
                        sDeviceType = "Robot"
                        nResult = LoadRobotAlarmDR(drNewAlarm, oAlarm.Alarm)
                        If nResult = 0 Then bDataOK = True
                        If bDataOK Then
                            'Get any available associated process data from the clsController object.
                            Dim oController As clsController = mcolControllers.Item(oAlarm.Device)
                            Dim nZone As Integer = oController.Arms(0).ZoneNumber
                            Dim sMnemonic As String = drNewAlarm.Item("AlarmNumber").ToString
                            Dim sAlarmDescription As String = drNewAlarm.Item("Description").ToString
                            Dim nAlarmDescLength As Integer = Strings.Len(sAlarmDescription)
                            Dim sNewAlarmDescription As String = sAlarmDescription
                            Dim nPositionColon As Integer = Strings.InStr(sAlarmDescription, ":", CompareMethod.Binary)

                            If nPositionColon > 0 Then
                                Dim sStrComp As String = "G:"
                                Dim nStrLen As Integer = Strings.Len(sStrComp)
                                Dim nPositionGroup As Integer = Strings.InStr(sAlarmDescription, sStrComp, CompareMethod.Binary)

                                If nPositionGroup = 0 Then
                                    sStrComp = "Group:"
                                    nStrLen = Strings.Len(sStrComp)
                                    nPositionGroup = Strings.InStr(sAlarmDescription, sStrComp, CompareMethod.Binary)
                                End If

                                If nPositionGroup = 0 Then
                                    sStrComp = "Grp:"
                                    nStrLen = Strings.Len(sStrComp)
                                    nPositionGroup = Strings.InStr(sAlarmDescription, sStrComp, CompareMethod.Binary)
                                End If

                                If nPositionGroup = 0 Then
                                    sStrComp = "Gp "
                                    nStrLen = Strings.Len(sStrComp)
                                    nPositionGroup = Strings.InStr(sAlarmDescription, sStrComp, CompareMethod.Binary)
                                End If

                                Dim sArmName As String
                                Try
                                    'MSW 4/12/12 Add some error handling in case the robot sends bad data 
                                    If nPositionGroup > 0 Then
                                        nEquipmentAlarm = CType(Strings.Mid(sAlarmDescription, nPositionGroup + nStrLen, 1), Integer)
                                        If nEquipmentAlarm > 0 Then
                                            sArmName = oController.Arms.Item(nEquipmentAlarm - 1).Name
                                            sNewAlarmDescription = sArmName & " " & sAlarmDescription
                                        End If
                                    End If

                                Catch ex As Exception
                                    sNewAlarmDescription = sAlarmDescription
                                End Try

                                Dim nThisArm As Integer
                                Dim nPositionEq As Integer
                                Dim nEqStrLen As Integer

                                If nPositionGroup = 0 Then
                                    For nThisArm = 1 To oController.Arms.Count
                                        sStrComp = "EQ" & nThisArm & ":"
                                        nPositionEq = Strings.InStr(sAlarmDescription.ToUpper, sStrComp, CompareMethod.Text)
                                        If nPositionEq > 0 Then
                                            nEqStrLen = Strings.Len(sStrComp)
                                            nEquipmentAlarm = CType(Strings.Mid(sAlarmDescription, nPositionEq + 2, 1), Integer)
                                            sArmName = oController.Arms.Item(nEquipmentAlarm - 1).Name
                                            '04/16/13   MSW     tmrNewAlarm_Tick - Only truncate alarm description if eq# is foundat the beginning of the string
                                            If nPositionEq = 1 Then
                                                sNewAlarmDescription = sArmName & " " & Strings.Right(sAlarmDescription, nAlarmDescLength - nEqStrLen)
                                            Else
                                                sNewAlarmDescription = sArmName & " " & sAlarmDescription
                                            End If
                                            Exit For
                                        End If
                                    Next
                                End If

                                'MSW 4/10/14 Another PaintTool alarm format
                                If nPositionGroup = 0 AndAlso nPositionEq = 0 Then
                                    For nThisArm = 1 To oController.Arms.Count
                                        sStrComp = "EQ:" & nThisArm
                                        nPositionEq = Strings.InStr(sAlarmDescription.ToUpper, sStrComp, CompareMethod.Text)
                                        If nPositionEq > 0 Then
                                            nEqStrLen = Strings.Len(sStrComp)
                                            nEquipmentAlarm = CType(Strings.Mid(sAlarmDescription, nPositionEq + 3, 1), Integer)
                                            sArmName = oController.Arms.Item(nEquipmentAlarm - 1).Name
                                            '04/16/13   MSW     tmrNewAlarm_Tick - Only truncate alarm description if eq# is found at the beginning of the string
                                            If nPositionEq = 1 Then
                                                sNewAlarmDescription = sArmName & " " & Strings.Right(sAlarmDescription, nAlarmDescLength - nEqStrLen)
                                            Else
                                                sNewAlarmDescription = sArmName & " " & sAlarmDescription
                                            End If
                                            Exit For
                                        End If
                                    Next
                                End If
                                Dim nPositionPTAlias As Integer
                                Dim nPTAliasStrLen As Integer

                                If nPositionGroup = 0 And nPositionEq = 0 Then
                                    For nThisArm = 0 To oController.Arms.Count - 1
                                        sStrComp = oController.Arms.Item(nThisArm).PaintToolAlias
                                        'Add colon to PaintToolAlias search to filter out path names 
                                        nPositionPTAlias = Strings.InStr(sNewAlarmDescription.ToUpper, (sStrComp & ":"), CompareMethod.Binary)
                                        sArmName = oController.Arms.Item(nThisArm).Name
                                        If nPositionPTAlias > 0 Then
                                            nEquipmentAlarm = nThisArm + 1
                                            nPTAliasStrLen = Strings.Len(sStrComp)
                                            '04/16/13   MSW     tmrNewAlarm_Tick - Only truncate alarm description if eq# is found at the beginning of the string
                                            If nPositionPTAlias = 1 Then
                                                'MSW 3/18/14 - get rid of the space before a colon if replacing 
                                                'sNewAlarmDescription = sArmName & " " & Strings.Right(sAlarmDescription, nAlarmDescLength - nPTAliasStrLen)
                                                sNewAlarmDescription = sArmName & Strings.Right(sAlarmDescription, nAlarmDescLength - nPTAliasStrLen)
                                            Else
                                                sNewAlarmDescription = sArmName & " " & sAlarmDescription
                                            End If
                                            Exit For
                                            'MSW 3/18/14 - catch PT alias without a colon at the beginning of the alarm text
                                        ElseIf sNewAlarmDescription.ToUpper.StartsWith(sStrComp.ToUpper) Then
                                            nEquipmentAlarm = nThisArm + 1
                                            sNewAlarmDescription = sArmName & Strings.Right(sAlarmDescription, nAlarmDescLength - nPTAliasStrLen)
                                            Exit For
                                        End If
                                    Next
                                End If

                            End If

                            If nEquipmentAlarm = 0 Then 'RJO 01/25/12
                                'If this is a PNTn alarm, determine if it is equipment related.
                                If sMnemonic.Length > 3 Then
                                    If sMnemonic.Substring(0, 3).ToUpper = "PNT" Then
                                        nEquipmentAlarm = GetEquipNumber(sMnemonic)
                                    End If
                                End If
                            End If

                            If nEquipmentAlarm > 0 Then
                                Dim oArm As clsArm = oController.Arms.Item(nEquipmentAlarm - 1)

                                With oArm
                                    If .AlarmAssocDataEnable Then
                                        .AlarmAssocData.Refresh()
                                        '    10/06/10   MSW     support some ASCII Data
                                        If gbAsciiStyle AndAlso .AlarmAssocData.Style <> String.Empty Then
                                            drNewAlarm.Item("Style") = mMathFunctions.CvIntegerToASCII(CType(.AlarmAssocData.Style, Integer), gnAsciiStyleNumChar)
                                        Else
                                            drNewAlarm.Item("Style") = .AlarmAssocData.Style
                                        End If
                                        If gbAsciiColor AndAlso .AlarmAssocData.Color <> String.Empty Then
                                            drNewAlarm.Item("Color") = mMathFunctions.CvIntegerToASCII(CType(.AlarmAssocData.Color, Integer), gnAsciiColorNumChar)
                                        Else
                                            drNewAlarm.Item("Color") = .AlarmAssocData.Color
                                        End If
                                        drNewAlarm.Item("Valve") = .AlarmAssocData.Valve
                                        drNewAlarm.Item("JobName") = .AlarmAssocData.JobName
                                        drNewAlarm.Item("Process") = .AlarmAssocData.Process
                                        drNewAlarm.Item("Node") = .AlarmAssocData.Node
                                    End If
                                End With 'oArm
                            Else
                                drNewAlarm.Item("Node") = 0
                            End If 'nEquip > 0

                            With drNewAlarm
                                .Item("Zone") = nZone
                                .Item("Description") = sNewAlarmDescription

                                If (mbEnablePLCAlarms = True) And (nEquipmentAlarm > 0) Then 'RJO 01/25/12
                                    'Also get any available associated process data for this equipment from the PLC
                                    Dim sAssocData() As String = mcolPLCAlarmZones.GetAssocData(mcolZones.ZoneNameFromNumber(nZone), oAlarm.Device, nEquipmentAlarm)  'RJO 01/25/12

                                    .Item("ProdID") = sAssocData(ePLCAssocData.ProdId)    '<VIN Number or Carrier Number>
                                    .Item("JobID") = sAssocData(ePLCAssocData.JobID)      '<Sequence Number>
                                    '    10/06/10   MSW     support some ASCII Data
                                    'If gbAsciiStyle AndAlso sAssocData(ePLCAssocData.Style) <> String.Empty Then
                                    '    .Item("Style") = mMathFunctions.CvIntegerToASCII(CType(sAssocData(ePLCAssocData.Style), Integer), gnAsciiStyleNumChar)
                                    'Else
                                    .Item("Style") = sAssocData(ePLCAssocData.Style)
                                    'End If

                                    'If gbAsciiColor AndAlso sAssocData(ePLCAssocData.Color) <> String.Empty Then
                                    '    .Item("Color") = mMathFunctions.CvIntegerToASCII(CType(sAssocData(ePLCAssocData.Color), Integer), gnAsciiColorNumChar)
                                    'Else
                                    .Item("Color") = sAssocData(ePLCAssocData.Color)
                                    'End If
                                End If 'mbEnablePLCAlarms

                            End With 'drNewAlarm

                        Else
                            'Application.
                        End If 'bDataOK

                    Case eDeviceType.PLC
                        sDeviceType = "PLC"

                        bDataOK = LoadPLCAlarmDR(drNewAlarm, oAlarm.Alarm)

                        Dim nThisDevice As Integer

                        For nThisDevice = 0 To (mcolControllers.Count - 1)

                            If oAlarm.Device = mcolControllers.Item(nThisDevice).Name Then
                                Dim oController As clsController = mcolControllers.Item(oAlarm.Device)
                                Dim sAlarmDescription As String = drNewAlarm.Item("Description").ToString
                                Dim nAlarmDescLength As Integer = Strings.Len(sAlarmDescription)
                                Dim sNewAlarmDescription As String = sAlarmDescription
                                Dim nThisArm As Integer
                                Dim nPositionEq As Integer

                                For nThisArm = 1 To oController.Arms.Count
                                    nPositionEq = Strings.InStr(sAlarmDescription.ToUpper, "EQ" & nThisArm & ":", CompareMethod.Binary)
                                    If nPositionEq > 0 Then
                                        nEquipmentAlarm = CType(Strings.Mid(sAlarmDescription, nPositionEq + 2, 1), Integer)
                                        Dim sArmName As String = oController.Arms.Item(nEquipmentAlarm - 1).Name
                                        sNewAlarmDescription = sArmName & Strings.Right(sAlarmDescription, nAlarmDescLength - 4)
                                        drNewAlarm.Item("Description") = sNewAlarmDescription
                                        Exit For
                                    End If
                                Next

                                Exit For
                            End If

                        Next


                    Case eDeviceType.GUI
                        sDeviceType = "GUI"
                        bDataOK = LoadInternalAlarmDR(drNewAlarm, oAlarm.Alarm)

                End Select

                '7/11/08 gks
                If MaskedAlarm(drNewAlarm.Item("AlarmNumber").ToString) = False Then
                    If bDataOK Then
                        Dim nFacility As Integer = DirectCast(drNewAlarm.Item("Facility"), Integer)
                        Dim sAlarmNumber As String = drNewAlarm.Item("AlarmNumber").ToString
                        Dim sDescription As String = drNewAlarm.Item("Description").ToString
                        Dim sStatus As String = drNewAlarm.Item("Status").ToString

                        'Look at the active alarm and then perform the appropriate action in dsActiveAlarms
                        If (nFacility <> 0) And (Strings.Left(sDescription.Trim, 9) <> "R E S E T") And (sStatus = "Active") Then
                            'An Active  alarm was received. If this alarm already exists in the active 
                            'alarm table, log it and remove it from the table. bReset is False in this 
                            'case so the new alarm will be placed in the active alarm list.

                            bReset = False
                            'Call subResetActiveAlarms(oAlarm.Device, sAlarmNumber, sDescription) '05/21/07 RJO

                            'If the alarm already exists in the active alarm table, just toss
                            'the new one out. 
                            If ActiveAlarmExists(oAlarm.Device, sAlarmNumber, sDescription, oAlarm.Type) Then
                                Exit Sub
                            End If

                        End If

                        If (nFacility = 0) Or (Strings.Left(sDescription.Trim, 9) = "R E S E T") Then
                            bReset = True

                            Select Case sDeviceType
                                Case "Robot"
                                    'R E S E T received from robot controller. Log all active alarms that originate
                                    'from this device and remove them from the active alarm table.
                                    Call subResetActiveAlarms(oAlarm.Device, "*", String.Empty, oAlarm.Type)
                                Case "PLC"
                                    'R E S E T received from the PLC. Log all active alarms that originate from this 
                                    'device with severity of WARNING or less and remove them from the active alarm table.
                                    Call subResetWarnings(oAlarm.Device)
                                Case Else
                                    'Not a valid device type for R E S E T
                            End Select

                        End If

                        'MSW 5/14/14 - Hide messages in bypass
                        If sAlarmNumber = msBypassAlarmCode Then
                            Call subResetActiveAlarms(oAlarm.Device, "*", String.Empty, oAlarm.Type)
                        ElseIf ActiveAlarmExists(oAlarm.Device, msBypassAlarmCode, "", eDeviceType.PLC) Then
                            Exit Sub
                        End If


                        If sStatus = "Reset" Then
                            'An alarm from the PLC or GUI went from TRUE to FALSE. Log this alarm and, 
                            'if Auto Acknowledge is selected, remove it from the active alarm table.
                            bReset = True
                            Call subResetActiveAlarms(oAlarm.Device, sAlarmNumber, sDescription, oAlarm.Type)
                        End If

                        'Add the new alarm to the Active Alarm datatset
                        If Not bReset Then
                            'Debug stuff 'RJO 05/05/08 - Hijack the Node field to store an alarm seqence number
                            'to help investigate claims of missing alarms.
                            If mnSequenceNumber < 2147483647 Then
                                mnSequenceNumber += 1
                            Else
                                mnSequenceNumber = 1
                            End If
                            'MSW 1/5/11 see if the real node number is actually being recorded
                            'drNewAlarm.Item("Node") = mnSequenceNumber
                            'Make this the top row in the dataset
                            dsActiveAlarms.Tables("ActiveAlarms").Rows.InsertAt(drNewAlarm, 0)

                            'Somehow RESETS are gettin' in the ActiveAlarms table. Find out why.
                            If Strings.Left(sDescription.Trim, 9) = "R E S E T" Then
                                mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: tmrNewAlarm_Tick", _
                                                       "Event: R E S E T alarm was added to ActiveAlarms. Device = [" & _
                                                       oAlarm.Device & "], Facility code = [" & nFacility.ToString & _
                                                       "], Status = [" & sStatus & "]")
                            End If
                        End If 'Not bReset

                    Else
                        'For Robots, log bDataOK = False status only if an error occured (nResult = 2). '05/05/08 RJO
                        If (sDeviceType <> "Robot") Or (nResult = 2) Then
                            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: tmrNewAlarm_Tick", _
                                                   "Error: Bad data in " & sDeviceType & _
                                                   " Alarm Object - Discarding Alarm Record. Device = " & oAlarm.Device)
                        End If

                    End If 'bDataOK
                End If 'MaskedAlarm(drNewAlarm.Item("AlarmNumber").ToString) = False 

                '    '7/11/08 gks
                '    If oCol.Count > 0 Then
                '        mbRecurseActive = True
                '        Call tmrNewAlarm_Tick(sender, e)
                '    End If
                'Else
                '    mbRecurseActive = False
                ' 09/30/13  MSW     subProcessAlarmCollection - make sure we don't drop any mines for the next routine.
                For Each oItem As Object In drNewAlarm.ItemArray
                    If oItem Is Nothing Then
                        oItem = ""
                    End If
                Next
            Loop

        Catch ex As Exception

        End Try
    End Sub

    Private Sub tmrNewAlarm_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles tmrNewAlarm.Tick
        '********************************************************************************************
        'Description: If a New alarm is present in the mcolActiveAlarms collection, add it to the 
        '             ActiveAlarm Dataset.
        '
        'Parameters: none
        'Returns:    none
        '
        'Modification history:
        '
        ' Date      By      Reason
        '05/05/08   RJO     Changes to accomodate modified return type in Function LoadAlarmDR.
        '08/07/08   AM      Replace Eq1, Eq2, .... etc with the Real Arm Name for Controllers Alarms and
        '                   PLC Generated alarms.
        '10/09/09   gks     Honda Changes
        '2/10/09    MSW     tmrNewAlarm_Tick - Copy PT alias changes from Saltillo
        '01/09/10   MSW     tmrNewAlarm_Tick - Add colon to PaintToolAlias search to filter out path names 
        '01/25/12   RJO     nEquip and nEquipmentAlarm were both being used to determine if an alarm 
        '                   should include associated data, but they didn't always match.
        '04/16/13   MSW     tmrNewAlarm_Tick - Only truncate alarm description if eq# is foundat the beginning of the string
        '********************************************************************************************

        If mbSupressNewAlarms And (Not mbRecurseActive) Then
            tmrNewAlarm.Enabled = True
            Exit Sub
                End If

        mbNewAlarmBusy = True
        tmrNewAlarm.Enabled = False

        Try
            subProcessAlarmCollection(mcolActiveAlarms)
            lblPLCAlarms.Text = mcolActiveAlarms.Count.ToString
            subProcessAlarmCollection(mcolActiveRobotAlarms)
            lblRobotAlarms.Text = mcolActiveRobotAlarms.Count.ToString
        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: tmrNewAlarm_Tick", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace & vbCrLf & "mcolActiveAlarms.Count = " & mcolActiveAlarms.Count.ToString)

            mcolActiveAlarms = New Collection(Of udtAlarm)

        Finally
            mbRecurseActive = False
            mbNewAlarmBusy = False
            tmrNewAlarm.Enabled = True
        End Try

    End Sub

    Private Sub tmrToolTip_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles tmrToolTip.Tick
        '********************************************************************************************
        'Description: Hide the grid column header tooltip if it has ben visible for a while.
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        lblGridTT.Visible = False

    End Sub

    Private Sub tmrUpdateGrid_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles tmrUpdateGrid.Tick
        '********************************************************************************************
        'Description: Don't update the grid if "ActiveAlarms" table hasn't changed
        '
        'Parameters: None
        'Returns:    None
        '
        'Modification history:
        '
        ' Date      By      Reason
        '******************************************************************************************** 

        Try
            Dim dtActiveAlarms As DataTable = dsActiveAlarms.Tables("ActiveAlarms")
            Dim dtLastPoll As DataTable = dsLastPoll.Tables("ActiveAlarms")
            Dim nRows As Integer = dtActiveAlarms.Rows.Count
            Dim bUpdate As Boolean = False

            tmrUpdateGrid.Enabled = False

            If (nRows <> dtLastPoll.Rows.Count) Or mbStatusChange Then
                mbStatusChange = False
                bUpdate = True
            Else
                If nRows > 0 Then
                    For nRow As Integer = 0 To (nRows - 1)
                        Dim sAlarmNumber As String = DirectCast(dtActiveAlarms.Rows(nRow).Item("AlarmNumber"), String)
                        Dim sLastAlarmNumber As String = DirectCast(dtLastPoll.Rows(nRow).Item("AlarmNumber"), String)
                        Dim oStartSerial As DateTime = DirectCast(dtActiveAlarms.Rows(nRow).Item("StartSerial"), DateTime)
                        Dim oLastStartSerial As DateTime = DirectCast(dtLastPoll.Rows(nRow).Item("StartSerial"), DateTime)

                        If (sAlarmNumber <> sLastAlarmNumber) Or (oStartSerial <> oLastStartSerial) Then
                            bUpdate = True
                            Exit For
                        End If
                    Next 'nRow
                End If 'nRows > 0
            End If 'nRows <> dtLastPoll.Rows.Count

            If bUpdate Then
                Call subRefreshStatus(msUpdating, True, Drawing.Color.PaleGreen)
                tmrBlink.Enabled = True
                Call subUpdateActiveAlarms()
                Call subNoAlarms(nRows = 0)
                dsLastPoll = dsActiveAlarms.Copy
            End If

            If mbInitSeverity Then
                mnSeverity = eAlarmSeverityLevel.Unknown
                Call subCheckSeverity()
                mbInitSeverity = False
            End If

            tmrUpdateGrid.Enabled = True

        Catch ex As Exception
            mDebug.WriteEventToLog(msSCREEN_NAME & " Module: " & msMODULE & " Routine: tmrUpdateGrid_Tick", _
                                   "Error: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try

    End Sub


    '********New program-to-program communication object******************************************
    Private Sub oIPC_NewMessage(ByVal Schema As String, ByVal DS As DataSet) Handles oIPC.NewMessage
        If Me.InvokeRequired Then
            Dim dNewMessage As New NewMessage_CallBack(AddressOf oIPC_NewMessage)
            Me.BeginInvoke(dNewMessage, New Object() {Schema, DS})
        Else
            Dim DR As DataRow = Nothing

            Select Case Schema.ToLower
                Case oIPC.CONTROL_MSG_SCHEMA.ToLower
                    DR = DS.Tables(Paintworks_IPC.clsInterProcessComm.sTABLE).Rows(0)
                    Call subDoScreenAction(DR)
                Case Else
            End Select
        End If
    End Sub
    '********************************************************************************************

#End Region


    Private Sub frmMain_Resize(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Resize
        '********************************************************************************************
        '        Description:  rESIZE
        '
        '
        'Modification(history)
        '
        'Date      By      Reason
        '******************************************************************************************** 
        '1034, 784 frmMain
        '984, 594 dgv
        Dim szTmp As Size = dgvAlarms.Size
        szTmp.Width = Me.Width - 50
        szTmp.Height = Me.Height - 190
        If (szTmp.Width > 5) And (szTmp.Height > 5) Then
            dgvAlarms.Size = szTmp
        End If
    End Sub

End Class